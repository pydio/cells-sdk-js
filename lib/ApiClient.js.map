{"version":3,"sources":["../src/ApiClient.js"],"names":["ApiClient","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","superagent","requestAgent","plugins","param","undefined","Date","toJSON","canBeJsonified","JSON","stringify","toString","path","pathParams","apiBasePath","match","url","fullMatch","key","value","hasOwnProperty","paramToString","encodeURIComponent","contentType","Boolean","contentTypes","i","length","isJsonMime","require","fs","err","ReadStream","Buffer","Blob","File","params","newParams","isFileParam","Array","isArray","collectionFormat","map","join","Error","request","authNames","forEach","authName","auth","type","username","password","accessToken","localVarBearerToken","set","apiKey","data","apiKeyPrefix","name","query","response","returnType","status","body","Object","keys","text","convertToType","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","buildUrl","index","use","applyAuthToRequest","toUpperCase","getTime","normalizeParams","jsonPreferredMime","send","querystring","_formParams","_formParamsValue","attach","file","field","header","accept","responseType","_attachCookies","withCredentials","Promise","resolve","reject","end","error","statusText","deserialize","_saveCookies","variables","servers","hostSettings","server","variable_name","variable","includes","str","isNaN","parseInt","parseFloat","String","parseDate","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 4.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nclass ApiClient {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * Overrides the default value set in spec file if present\n     * @param {String} basePath\n     */\n    constructor(basePath = 'http://localhost') {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default http://localhost\n         */\n        this.basePath = basePath.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {\n            'User-Agent': 'OpenAPI-Generator/4.0/Javascript'\n        };\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n        /*\n         * Allow user to add superagent plugins\n         */\n        this.plugins = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n        if (ApiClient.canBeJsonified(param)) {\n            return JSON.stringify(param);\n        }\n\n        return param.toString();\n    }\n\n    /**\n    * Returns a boolean indicating if the parameter could be JSON.stringified\n    * @param param The actual parameter\n    * @returns {Boolean} Flag indicating if <code>param</code> can be JSON.stringified\n    */\n    static canBeJsonified(str) {\n        if (typeof str !== 'string' && typeof str !== 'object') return false;\n        try {\n            const type = str.toString();\n            return type === '[object Object]'\n                || type === '[object Array]';\n        } catch (err) {\n            return false;\n        }\n    };\n\n   /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams, apiBasePath) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n\n        // use API (operation, path) base path if defined\n        if (apiBasePath !== null && apiBasePath !== undefined) {\n            url = apiBasePath + path;\n        }\n\n        url = url.replace(/\\{([\\w-\\.]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString, this).join(',');\n            case 'ssv':\n                return param.map(this.paramToString, this).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString, this).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString, this).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString, this);\n            case 'passthrough':\n                return param;\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'bearer':\n                    if (auth.accessToken) {\n                        var localVarBearerToken = typeof auth.accessToken === 'function'\n                          ? auth.accessToken()\n                          : auth.accessToken\n                        request.set({'Authorization': 'Bearer ' + localVarBearerToken});\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n   /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n\n   /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @param {String} apiBasePath base path defined in the operation/path level to override the default one\n    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType, apiBasePath) {\n\n        var url = this.buildUrl(path, pathParams, apiBasePath);\n        var request = superagent(httpMethod, url);\n\n        if (this.plugins !== null) {\n            for (var index in this.plugins) {\n                if (this.plugins.hasOwnProperty(index)) {\n                    request.use(this.plugins[index])\n                }\n            }\n        }\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set requestAgent if it is set by user\n        if (this.requestAgent) {\n          request.agent(this.requestAgent);\n        }\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    let _formParamsValue = _formParams[key];\n                    if (this.isFileParam(_formParamsValue)) {\n                        // file field\n                        request.attach(key, _formParamsValue);\n                    } else if (Array.isArray(_formParamsValue) && _formParamsValue.length\n                        && this.isFileParam(_formParamsValue[0])) {\n                        // multiple files\n                        _formParamsValue.forEach(file => request.attach(key, file));\n                    } else {\n                        request.field(key, _formParamsValue);\n                    }\n                }\n            }\n        } else if (bodyParam !== null && bodyParam !== undefined) {\n            if (!request.header['Content-Type']) {\n                request.type('application/json');\n            }\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent._attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            request.end((error, response) => {\n                if (error) {\n                    var err = {};\n                    if (response) {\n                        err.status = response.status;\n                        err.statusText = response.statusText;\n                        err.body = response.body;\n                        err.response = response;\n                    }\n                    err.error = error;\n\n                    reject(err);\n                } else {\n                    try {\n                        var data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent._saveCookies(response);\n                        }\n\n                        resolve({data, response});\n                    } catch (err) {\n                        reject(err);\n                    }\n                }\n            });\n        });\n\n    }\n\n    /**\n    * Parses an ISO-8601 string representation or epoch representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        if (isNaN(str)) {\n            return new Date(str.replace(/(\\d)(T)(\\d)/i, '$1 $3'));\n        }\n        return new Date(+str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type.constructFromObject === 'function') {\n                    // for model type like User and enum class\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n  /**\n    * Gets an array of host settings\n    * @returns An array of host settings\n    */\n    hostSettings() {\n        return [\n            {\n              'url': \"\",\n              'description': \"No description provided\",\n            }\n      ];\n    }\n\n    getBasePathFromSettings(index, variables={}) {\n        var servers = this.hostSettings();\n\n        // check array index out of bound\n        if (index < 0 || index >= servers.length) {\n            throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n        }\n\n        var server = servers[index];\n        var url = server['url'];\n\n        // go through variable and assign a value\n        for (var variable_name in server['variables']) {\n            if (variable_name in variables) {\n                let variable = server['variables'][variable_name];\n                if ( !('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name]) ) {\n                    url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n                } else {\n                    throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n                }\n            } else {\n                // use default value\n                url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value'])\n            }\n        }\n        return url;\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nApiClient.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n};\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\nexport default ApiClient;\n"],"file":"ApiClient.js"}