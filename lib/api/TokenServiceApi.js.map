{"version":3,"sources":["../../src/api/TokenServiceApi.js"],"names":["TokenServiceApi","apiClient","ApiClient","instance","body","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestDocumentAccessTokenResponse","callApi","generateDocumentAccessTokenWithHttpInfo","then","response_and_data","data","RestResetPasswordResponse","resetPasswordWithHttpInfo","userLogin","RestResetPasswordTokenResponse","resetPasswordTokenWithHttpInfo","RestRevokeResponse","revokeWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport RestDocumentAccessTokenRequest from '../model/RestDocumentAccessTokenRequest';\nimport RestDocumentAccessTokenResponse from '../model/RestDocumentAccessTokenResponse';\nimport RestResetPasswordRequest from '../model/RestResetPasswordRequest';\nimport RestResetPasswordResponse from '../model/RestResetPasswordResponse';\nimport RestResetPasswordTokenResponse from '../model/RestResetPasswordTokenResponse';\nimport RestRevokeRequest from '../model/RestRevokeRequest';\nimport RestRevokeResponse from '../model/RestRevokeResponse';\n\n/**\n* TokenService service.\n* @module api/TokenServiceApi\n* @version 1.0\n*/\nexport default class TokenServiceApi {\n\n    /**\n    * Constructs a new TokenServiceApi. \n    * @alias module:api/TokenServiceApi\n    * @class\n    * @param {module:ApiClient} apiClient Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Generate a temporary access token for a specific document for the current user\n     * @param {module:model/RestDocumentAccessTokenRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDocumentAccessTokenResponse} and HTTP response\n     */\n    generateDocumentAccessTokenWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling generateDocumentAccessToken\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDocumentAccessTokenResponse;\n\n      return this.apiClient.callApi(\n        '/auth/token/document', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Generate a temporary access token for a specific document for the current user\n     * @param {module:model/RestDocumentAccessTokenRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDocumentAccessTokenResponse}\n     */\n    generateDocumentAccessToken(body) {\n      return this.generateDocumentAccessTokenWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Finish up the reset password process by providing the unique token\n     * @param {module:model/RestResetPasswordRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordResponse} and HTTP response\n     */\n    resetPasswordWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling resetPassword\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestResetPasswordResponse;\n\n      return this.apiClient.callApi(\n        '/auth/reset-password', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Finish up the reset password process by providing the unique token\n     * @param {module:model/RestResetPasswordRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordResponse}\n     */\n    resetPassword(body) {\n      return this.resetPasswordWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generate a unique token for the reset password process\n     * @param {String} userLogin \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordTokenResponse} and HTTP response\n     */\n    resetPasswordTokenWithHttpInfo(userLogin) {\n      let postBody = null;\n\n      // verify the required parameter 'userLogin' is set\n      if (userLogin === undefined || userLogin === null) {\n        throw new Error(\"Missing the required parameter 'userLogin' when calling resetPasswordToken\");\n      }\n\n\n      let pathParams = {\n        'UserLogin': userLogin\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestResetPasswordTokenResponse;\n\n      return this.apiClient.callApi(\n        '/auth/reset-password-token/{UserLogin}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Generate a unique token for the reset password process\n     * @param {String} userLogin \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordTokenResponse}\n     */\n    resetPasswordToken(userLogin) {\n      return this.resetPasswordTokenWithHttpInfo(userLogin)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Revoke a JWT token\n     * @param {module:model/RestRevokeRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRevokeResponse} and HTTP response\n     */\n    revokeWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling revoke\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestRevokeResponse;\n\n      return this.apiClient.callApi(\n        '/auth/token/revoke', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Revoke a JWT token\n     * @param {module:model/RestRevokeRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRevokeResponse}\n     */\n    revoke(body) {\n      return this.revokeWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"TokenServiceApi.js"}