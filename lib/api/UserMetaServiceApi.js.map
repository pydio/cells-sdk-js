{"version":3,"sources":["../../src/api/UserMetaServiceApi.js"],"names":["UserMetaServiceApi","apiClient","ApiClient","instance","namespace","tags","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestDeleteUserMetaTagsResponse","callApi","deleteUserMetaTagsWithHttpInfo","then","response_and_data","data","RestUserMetaNamespaceCollection","listUserMetaNamespaceWithHttpInfo","RestListUserMetaTagsResponse","listUserMetaTagsWithHttpInfo","body","RestPutUserMetaTagResponse","putUserMetaTagWithHttpInfo","RestUserMetaCollection","searchUserMetaWithHttpInfo","IdmUpdateUserMetaResponse","updateUserMetaWithHttpInfo","IdmUpdateUserMetaNamespaceResponse","updateUserMetaNamespaceWithHttpInfo","RestBulkMetaResponse","userBookmarksWithHttpInfo"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACqBA,kB;AAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,8BAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAS,IAAIC,sBAAUC,QAAxC;AACH;AAID;AACJ;AACA;AACA;AACA;AACA;;;;;WACI,wCAA+BC,SAA/B,EAA0CC,IAA1C,EAAgD;AAC9C,UAAIC,QAAQ,GAAG,IAAf,CAD8C,CAG9C;;AACA,UAAIF,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAA7C,EAAmD;AACjD,cAAM,IAAII,KAAJ,CAAU,4EAAV,CAAN;AACD,OAN6C,CAQ9C;;;AACA,UAAIH,IAAI,KAAKE,SAAT,IAAsBF,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAIG,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,qBAAaL,SADE;AAEf,gBAAQC;AAFO,OAAjB;AAIA,UAAIK,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGC,0CAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,oCADK,EACiC,QADjC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,4BAAmBZ,SAAnB,EAA8BC,IAA9B,EAAoC;AAClC,aAAO,KAAKc,8BAAL,CAAoCf,SAApC,EAA+CC,IAA/C,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;;;;WACI,6CAAoC;AAClC,UAAIhB,QAAQ,GAAG,IAAf;AAGA,UAAIG,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGO,2CAAjB;AAEA,aAAO,KAAKtB,SAAL,CAAeiB,OAAf,CACL,sBADK,EACmB,KADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;;;;WACI,iCAAwB;AACtB,aAAO,KAAKQ,iCAAL,GACJJ,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,sCAA6BlB,SAA7B,EAAwC;AACtC,UAAIE,QAAQ,GAAG,IAAf,CADsC,CAGtC;;AACA,UAAIF,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAA7C,EAAmD;AACjD,cAAM,IAAII,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,qBAAaL;AADE,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGS,wCAAjB;AAEA,aAAO,KAAKxB,SAAL,CAAeiB,OAAf,CACL,6BADK,EAC0B,KAD1B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,0BAAiBZ,SAAjB,EAA4B;AAC1B,aAAO,KAAKsB,4BAAL,CAAkCtB,SAAlC,EACJgB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oCAA2BlB,SAA3B,EAAsCuB,IAAtC,EAA4C;AAC1C,UAAIrB,QAAQ,GAAGqB,IAAf,CAD0C,CAG1C;;AACA,UAAIvB,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAA7C,EAAmD;AACjD,cAAM,IAAII,KAAJ,CAAU,wEAAV,CAAN;AACD,OANyC,CAQ1C;;;AACA,UAAImB,IAAI,KAAKpB,SAAT,IAAsBoB,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,qBAAaL;AADE,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGY,sCAAjB;AAEA,aAAO,KAAK3B,SAAL,CAAeiB,OAAf,CACL,6BADK,EAC0B,MAD1B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAeZ,SAAf,EAA0BuB,IAA1B,EAAgC;AAC9B,aAAO,KAAKE,0BAAL,CAAgCzB,SAAhC,EAA2CuB,IAA3C,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,oCAA2BK,IAA3B,EAAiC;AAC/B,UAAIrB,QAAQ,GAAGqB,IAAf,CAD+B,CAG/B;;AACA,UAAIA,IAAI,KAAKpB,SAAT,IAAsBoB,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGc,kCAAjB;AAEA,aAAO,KAAK7B,SAAL,CAAeiB,OAAf,CACL,mBADK,EACgB,MADhB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeW,IAAf,EAAqB;AACnB,aAAO,KAAKI,0BAAL,CAAgCJ,IAAhC,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,oCAA2BK,IAA3B,EAAiC;AAC/B,UAAIrB,QAAQ,GAAGqB,IAAf,CAD+B,CAG/B;;AACA,UAAIA,IAAI,KAAKpB,SAAT,IAAsBoB,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGgB,qCAAjB;AAEA,aAAO,KAAK/B,SAAL,CAAeiB,OAAf,CACL,mBADK,EACgB,KADhB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeW,IAAf,EAAqB;AACnB,aAAO,KAAKM,0BAAL,CAAgCN,IAAhC,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,6CAAoCK,IAApC,EAA0C;AACxC,UAAIrB,QAAQ,GAAGqB,IAAf,CADwC,CAGxC;;AACA,UAAIA,IAAI,KAAKpB,SAAT,IAAsBoB,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGkB,8CAAjB;AAEA,aAAO,KAAKjC,SAAL,CAAeiB,OAAf,CACL,sBADK,EACmB,KADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,iCAAwBW,IAAxB,EAA8B;AAC5B,aAAO,KAAKQ,mCAAL,CAAyCR,IAAzC,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,mCAA0BK,IAA1B,EAAgC;AAC9B,UAAIrB,QAAQ,GAAGqB,IAAf,CAD8B,CAG9B;;AACA,UAAIA,IAAI,KAAKpB,SAAT,IAAsBoB,IAAI,KAAK,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGoB,gCAAjB;AAEA,aAAO,KAAKnC,SAAL,CAAeiB,OAAf,CACL,sBADK,EACmB,MADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,uBAAcW,IAAd,EAAoB;AAClB,aAAO,KAAKU,yBAAL,CAA+BV,IAA/B,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport IdmSearchUserMetaRequest from '../model/IdmSearchUserMetaRequest';\nimport IdmUpdateUserMetaNamespaceRequest from '../model/IdmUpdateUserMetaNamespaceRequest';\nimport IdmUpdateUserMetaNamespaceResponse from '../model/IdmUpdateUserMetaNamespaceResponse';\nimport IdmUpdateUserMetaRequest from '../model/IdmUpdateUserMetaRequest';\nimport IdmUpdateUserMetaResponse from '../model/IdmUpdateUserMetaResponse';\nimport RestBulkMetaResponse from '../model/RestBulkMetaResponse';\nimport RestDeleteUserMetaTagsResponse from '../model/RestDeleteUserMetaTagsResponse';\nimport RestListUserMetaTagsResponse from '../model/RestListUserMetaTagsResponse';\nimport RestPutUserMetaTagRequest from '../model/RestPutUserMetaTagRequest';\nimport RestPutUserMetaTagResponse from '../model/RestPutUserMetaTagResponse';\nimport RestUserBookmarksRequest from '../model/RestUserBookmarksRequest';\nimport RestUserMetaCollection from '../model/RestUserMetaCollection';\nimport RestUserMetaNamespaceCollection from '../model/RestUserMetaNamespaceCollection';\n\n/**\n* UserMetaService service.\n* @module api/UserMetaServiceApi\n* @version 1.0\n*/\nexport default class UserMetaServiceApi {\n\n    /**\n    * Constructs a new UserMetaServiceApi. \n    * @alias module:api/UserMetaServiceApi\n    * @class\n    * @param {module:ApiClient} apiClient Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Delete one or all tags for a given namespace (use * for all tags)\n     * @param {String} namespace \n     * @param {String} tags \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteUserMetaTagsResponse} and HTTP response\n     */\n    deleteUserMetaTagsWithHttpInfo(namespace, tags) {\n      let postBody = null;\n\n      // verify the required parameter 'namespace' is set\n      if (namespace === undefined || namespace === null) {\n        throw new Error(\"Missing the required parameter 'namespace' when calling deleteUserMetaTags\");\n      }\n\n      // verify the required parameter 'tags' is set\n      if (tags === undefined || tags === null) {\n        throw new Error(\"Missing the required parameter 'tags' when calling deleteUserMetaTags\");\n      }\n\n\n      let pathParams = {\n        'Namespace': namespace,\n        'Tags': tags\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDeleteUserMetaTagsResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/tags/{Namespace}/{Tags}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete one or all tags for a given namespace (use * for all tags)\n     * @param {String} namespace \n     * @param {String} tags \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteUserMetaTagsResponse}\n     */\n    deleteUserMetaTags(namespace, tags) {\n      return this.deleteUserMetaTagsWithHttpInfo(namespace, tags)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List defined meta namespaces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserMetaNamespaceCollection} and HTTP response\n     */\n    listUserMetaNamespaceWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestUserMetaNamespaceCollection;\n\n      return this.apiClient.callApi(\n        '/user-meta/namespace', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List defined meta namespaces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserMetaNamespaceCollection}\n     */\n    listUserMetaNamespace() {\n      return this.listUserMetaNamespaceWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List Tags for a given namespace\n     * @param {String} namespace \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListUserMetaTagsResponse} and HTTP response\n     */\n    listUserMetaTagsWithHttpInfo(namespace) {\n      let postBody = null;\n\n      // verify the required parameter 'namespace' is set\n      if (namespace === undefined || namespace === null) {\n        throw new Error(\"Missing the required parameter 'namespace' when calling listUserMetaTags\");\n      }\n\n\n      let pathParams = {\n        'Namespace': namespace\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestListUserMetaTagsResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/tags/{Namespace}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List Tags for a given namespace\n     * @param {String} namespace \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListUserMetaTagsResponse}\n     */\n    listUserMetaTags(namespace) {\n      return this.listUserMetaTagsWithHttpInfo(namespace)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Add a new value to Tags for a given namespace\n     * @param {String} namespace \n     * @param {module:model/RestPutUserMetaTagRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestPutUserMetaTagResponse} and HTTP response\n     */\n    putUserMetaTagWithHttpInfo(namespace, body) {\n      let postBody = body;\n\n      // verify the required parameter 'namespace' is set\n      if (namespace === undefined || namespace === null) {\n        throw new Error(\"Missing the required parameter 'namespace' when calling putUserMetaTag\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling putUserMetaTag\");\n      }\n\n\n      let pathParams = {\n        'Namespace': namespace\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestPutUserMetaTagResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/tags/{Namespace}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add a new value to Tags for a given namespace\n     * @param {String} namespace \n     * @param {module:model/RestPutUserMetaTagRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestPutUserMetaTagResponse}\n     */\n    putUserMetaTag(namespace, body) {\n      return this.putUserMetaTagWithHttpInfo(namespace, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Search a list of meta by node Id or by User id and by namespace\n     * @param {module:model/IdmSearchUserMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserMetaCollection} and HTTP response\n     */\n    searchUserMetaWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling searchUserMeta\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestUserMetaCollection;\n\n      return this.apiClient.callApi(\n        '/user-meta/search', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Search a list of meta by node Id or by User id and by namespace\n     * @param {module:model/IdmSearchUserMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserMetaCollection}\n     */\n    searchUserMeta(body) {\n      return this.searchUserMetaWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update/delete user meta\n     * @param {module:model/IdmUpdateUserMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUpdateUserMetaResponse} and HTTP response\n     */\n    updateUserMetaWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling updateUserMeta\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IdmUpdateUserMetaResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/update', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update/delete user meta\n     * @param {module:model/IdmUpdateUserMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUpdateUserMetaResponse}\n     */\n    updateUserMeta(body) {\n      return this.updateUserMetaWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Admin: update namespaces\n     * @param {module:model/IdmUpdateUserMetaNamespaceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUpdateUserMetaNamespaceResponse} and HTTP response\n     */\n    updateUserMetaNamespaceWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling updateUserMetaNamespace\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IdmUpdateUserMetaNamespaceResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/namespace', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Admin: update namespaces\n     * @param {module:model/IdmUpdateUserMetaNamespaceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUpdateUserMetaNamespaceResponse}\n     */\n    updateUserMetaNamespace(body) {\n      return this.updateUserMetaNamespaceWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n     * @param {module:model/RestUserBookmarksRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestBulkMetaResponse} and HTTP response\n     */\n    userBookmarksWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling userBookmarks\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestBulkMetaResponse;\n\n      return this.apiClient.callApi(\n        '/user-meta/bookmarks', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n     * @param {module:model/RestUserBookmarksRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestBulkMetaResponse}\n     */\n    userBookmarks(body) {\n      return this.userBookmarksWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"UserMetaServiceApi.js"}