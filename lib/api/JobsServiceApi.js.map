{"version":3,"sources":["../../src/api/JobsServiceApi.js"],"names":["JobsServiceApi","apiClient","ApiClient","instance","body","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestLogMessageCollection","callApi","listTasksLogsWithHttpInfo","then","response_and_data","data","JobsCtrlCommandResponse","userControlJobWithHttpInfo","JobName","RestUserJobResponse","userCreateJobWithHttpInfo","JobsDeleteTasksResponse","userDeleteTasksWithHttpInfo","RestUserJobsCollection","userListJobsWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport JobsCtrlCommand from '../model/JobsCtrlCommand';\nimport JobsCtrlCommandResponse from '../model/JobsCtrlCommandResponse';\nimport JobsDeleteTasksRequest from '../model/JobsDeleteTasksRequest';\nimport JobsDeleteTasksResponse from '../model/JobsDeleteTasksResponse';\nimport JobsListJobsRequest from '../model/JobsListJobsRequest';\nimport LogListLogRequest from '../model/LogListLogRequest';\nimport RestError from '../model/RestError';\nimport RestLogMessageCollection from '../model/RestLogMessageCollection';\nimport RestUserJobRequest from '../model/RestUserJobRequest';\nimport RestUserJobResponse from '../model/RestUserJobResponse';\nimport RestUserJobsCollection from '../model/RestUserJobsCollection';\n\n/**\n* JobsService service.\n* @module api/JobsServiceApi\n* @version 4.0\n*/\nexport default class JobsServiceApi {\n\n    /**\n    * Constructs a new JobsServiceApi. \n    * @alias module:api/JobsServiceApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Technical Logs, in Json or CSV format\n     * @param {module:model/LogListLogRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestLogMessageCollection} and HTTP response\n     */\n    listTasksLogsWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listTasksLogs\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestLogMessageCollection;\n      return this.apiClient.callApi(\n        '/jobs/tasks/logs', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Technical Logs, in Json or CSV format\n     * @param {module:model/LogListLogRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestLogMessageCollection}\n     */\n    listTasksLogs(body) {\n      return this.listTasksLogsWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send Control Commands to one or many jobs / tasks\n     * @param {module:model/JobsCtrlCommand} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsCtrlCommandResponse} and HTTP response\n     */\n    userControlJobWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling userControlJob\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = JobsCtrlCommandResponse;\n      return this.apiClient.callApi(\n        '/jobs/user', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Send Control Commands to one or many jobs / tasks\n     * @param {module:model/JobsCtrlCommand} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsCtrlCommandResponse}\n     */\n    userControlJob(body) {\n      return this.userControlJobWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a predefined job to be run directly\n     * @param {String} JobName Name of the job to create in the user space\n     * @param {module:model/RestUserJobRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserJobResponse} and HTTP response\n     */\n    userCreateJobWithHttpInfo(JobName, body) {\n      let postBody = body;\n      // verify the required parameter 'JobName' is set\n      if (JobName === undefined || JobName === null) {\n        throw new Error(\"Missing the required parameter 'JobName' when calling userCreateJob\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling userCreateJob\");\n      }\n\n      let pathParams = {\n        'JobName': JobName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestUserJobResponse;\n      return this.apiClient.callApi(\n        '/jobs/user/{JobName}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Create a predefined job to be run directly\n     * @param {String} JobName Name of the job to create in the user space\n     * @param {module:model/RestUserJobRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserJobResponse}\n     */\n    userCreateJob(JobName, body) {\n      return this.userCreateJobWithHttpInfo(JobName, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a control command to clean tasks on a given job\n     * @param {module:model/JobsDeleteTasksRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsDeleteTasksResponse} and HTTP response\n     */\n    userDeleteTasksWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling userDeleteTasks\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = JobsDeleteTasksResponse;\n      return this.apiClient.callApi(\n        '/jobs/tasks/delete', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Send a control command to clean tasks on a given job\n     * @param {module:model/JobsDeleteTasksRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsDeleteTasksResponse}\n     */\n    userDeleteTasks(body) {\n      return this.userDeleteTasksWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List jobs associated with current user\n     * @param {module:model/JobsListJobsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserJobsCollection} and HTTP response\n     */\n    userListJobsWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling userListJobs\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestUserJobsCollection;\n      return this.apiClient.callApi(\n        '/jobs/user', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List jobs associated with current user\n     * @param {module:model/JobsListJobsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserJobsCollection}\n     */\n    userListJobs(body) {\n      return this.userListJobsWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"JobsServiceApi.js"}