{"version":3,"sources":["../../src/api/MetaServiceApi.js"],"names":["MetaServiceApi","apiClient","ApiClient","instance","NodePath","body","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","TreeNode","callApi","deleteMetaWithHttpInfo","then","response_and_data","data","RestBulkMetaResponse","getBulkMetaWithHttpInfo","getMetaWithHttpInfo","setMetaWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport RestBulkMetaResponse from '../model/RestBulkMetaResponse';\nimport RestError from '../model/RestError';\nimport RestGetBulkMetaRequest from '../model/RestGetBulkMetaRequest';\nimport RestMetaCollection from '../model/RestMetaCollection';\nimport RestMetaNamespaceRequest from '../model/RestMetaNamespaceRequest';\nimport RestMetaNamespaceRequest1 from '../model/RestMetaNamespaceRequest1';\nimport TreeNode from '../model/TreeNode';\n\n/**\n* MetaService service.\n* @module api/MetaServiceApi\n* @version 4.0\n*/\nexport default class MetaServiceApi {\n\n    /**\n    * Constructs a new MetaServiceApi. \n    * @alias module:api/MetaServiceApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Delete metadata of a given node\n     * @param {String} NodePath Path to the requested node\n     * @param {module:model/RestMetaNamespaceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response\n     */\n    deleteMetaWithHttpInfo(NodePath, body) {\n      let postBody = body;\n      // verify the required parameter 'NodePath' is set\n      if (NodePath === undefined || NodePath === null) {\n        throw new Error(\"Missing the required parameter 'NodePath' when calling deleteMeta\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling deleteMeta\");\n      }\n\n      let pathParams = {\n        'NodePath': NodePath\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = TreeNode;\n      return this.apiClient.callApi(\n        '/meta/delete/{NodePath}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Delete metadata of a given node\n     * @param {String} NodePath Path to the requested node\n     * @param {module:model/RestMetaNamespaceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}\n     */\n    deleteMeta(NodePath, body) {\n      return this.deleteMetaWithHttpInfo(NodePath, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List meta for a list of nodes, or a full directory using /path/_* syntax\n     * @param {module:model/RestGetBulkMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestBulkMetaResponse} and HTTP response\n     */\n    getBulkMetaWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling getBulkMeta\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestBulkMetaResponse;\n      return this.apiClient.callApi(\n        '/meta/bulk/get', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List meta for a list of nodes, or a full directory using /path/_* syntax\n     * @param {module:model/RestGetBulkMetaRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestBulkMetaResponse}\n     */\n    getBulkMeta(body) {\n      return this.getBulkMetaWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Load metadata for a given node\n     * @param {String} NodePath Path to the requested node\n     * @param {module:model/RestMetaNamespaceRequest1} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response\n     */\n    getMetaWithHttpInfo(NodePath, body) {\n      let postBody = body;\n      // verify the required parameter 'NodePath' is set\n      if (NodePath === undefined || NodePath === null) {\n        throw new Error(\"Missing the required parameter 'NodePath' when calling getMeta\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling getMeta\");\n      }\n\n      let pathParams = {\n        'NodePath': NodePath\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = TreeNode;\n      return this.apiClient.callApi(\n        '/meta/get/{NodePath}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Load metadata for a given node\n     * @param {String} NodePath Path to the requested node\n     * @param {module:model/RestMetaNamespaceRequest1} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}\n     */\n    getMeta(NodePath, body) {\n      return this.getMetaWithHttpInfo(NodePath, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update metadata for a given node\n     * @param {String} NodePath \n     * @param {module:model/RestMetaCollection} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response\n     */\n    setMetaWithHttpInfo(NodePath, body) {\n      let postBody = body;\n      // verify the required parameter 'NodePath' is set\n      if (NodePath === undefined || NodePath === null) {\n        throw new Error(\"Missing the required parameter 'NodePath' when calling setMeta\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling setMeta\");\n      }\n\n      let pathParams = {\n        'NodePath': NodePath\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = TreeNode;\n      return this.apiClient.callApi(\n        '/meta/set/{NodePath}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Update metadata for a given node\n     * @param {String} NodePath \n     * @param {module:model/RestMetaCollection} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}\n     */\n    setMeta(NodePath, body) {\n      return this.setMetaWithHttpInfo(NodePath, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"MetaServiceApi.js"}