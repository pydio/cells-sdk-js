{"version":3,"sources":["../../src/api/RoleServiceApi.js"],"names":["RoleServiceApi","apiClient","ApiClient","instance","Uuid","opts","postBody","undefined","Error","pathParams","queryParams","buildCollectionParam","headerParams","formParams","authNames","contentTypes","accepts","returnType","IdmRole","callApi","deleteRoleWithHttpInfo","then","response_and_data","data","getRoleWithHttpInfo","body","RestRolesCollection","searchRolesWithHttpInfo","setRoleWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport IdmRole from '../model/IdmRole';\nimport InlineObject from '../model/InlineObject';\nimport RestError from '../model/RestError';\nimport RestRolesCollection from '../model/RestRolesCollection';\nimport RestSearchRoleRequest from '../model/RestSearchRoleRequest';\n\n/**\n* RoleService service.\n* @module api/RoleServiceApi\n* @version 4.0\n*/\nexport default class RoleServiceApi {\n\n    /**\n    * Constructs a new RoleServiceApi. \n    * @alias module:api/RoleServiceApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Delete a Role by ID\n     * @param {String} Uuid Unique identifier of this role\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Label Label of this role.\n     * @param {Boolean} opts.IsTeam Whether this role represents a user team or not.\n     * @param {Boolean} opts.GroupRole Whether this role is attached to a Group object.\n     * @param {Boolean} opts.UserRole Whether this role is attached to a User object.\n     * @param {Number} opts.LastUpdated Last modification date of the role.\n     * @param {Array.<String>} opts.AutoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied.\n     * @param {Boolean} opts.PoliciesContextEditable Whether the policies resolve into an editable state.\n     * @param {Boolean} opts.ForceOverride Is used in a stack of roles, this one will always be applied last.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response\n     */\n    deleteRoleWithHttpInfo(Uuid, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'Uuid' is set\n      if (Uuid === undefined || Uuid === null) {\n        throw new Error(\"Missing the required parameter 'Uuid' when calling deleteRole\");\n      }\n\n      let pathParams = {\n        'Uuid': Uuid\n      };\n      let queryParams = {\n        'Label': opts['Label'],\n        'IsTeam': opts['IsTeam'],\n        'GroupRole': opts['GroupRole'],\n        'UserRole': opts['UserRole'],\n        'LastUpdated': opts['LastUpdated'],\n        'AutoApplies': this.apiClient.buildCollectionParam(opts['AutoApplies'], 'multi'),\n        'PoliciesContextEditable': opts['PoliciesContextEditable'],\n        'ForceOverride': opts['ForceOverride']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IdmRole;\n      return this.apiClient.callApi(\n        '/role/{Uuid}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Delete a Role by ID\n     * @param {String} Uuid Unique identifier of this role\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Label Label of this role.\n     * @param {Boolean} opts.IsTeam Whether this role represents a user team or not.\n     * @param {Boolean} opts.GroupRole Whether this role is attached to a Group object.\n     * @param {Boolean} opts.UserRole Whether this role is attached to a User object.\n     * @param {Number} opts.LastUpdated Last modification date of the role.\n     * @param {Array.<String>} opts.AutoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied.\n     * @param {Boolean} opts.PoliciesContextEditable Whether the policies resolve into an editable state.\n     * @param {Boolean} opts.ForceOverride Is used in a stack of roles, this one will always be applied last.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}\n     */\n    deleteRole(Uuid, opts) {\n      return this.deleteRoleWithHttpInfo(Uuid, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a Role by ID\n     * @param {String} Uuid Unique identifier of this role\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Label Label of this role.\n     * @param {Boolean} opts.IsTeam Whether this role represents a user team or not.\n     * @param {Boolean} opts.GroupRole Whether this role is attached to a Group object.\n     * @param {Boolean} opts.UserRole Whether this role is attached to a User object.\n     * @param {Number} opts.LastUpdated Last modification date of the role.\n     * @param {Array.<String>} opts.AutoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied.\n     * @param {Boolean} opts.PoliciesContextEditable Whether the policies resolve into an editable state.\n     * @param {Boolean} opts.ForceOverride Is used in a stack of roles, this one will always be applied last.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response\n     */\n    getRoleWithHttpInfo(Uuid, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'Uuid' is set\n      if (Uuid === undefined || Uuid === null) {\n        throw new Error(\"Missing the required parameter 'Uuid' when calling getRole\");\n      }\n\n      let pathParams = {\n        'Uuid': Uuid\n      };\n      let queryParams = {\n        'Label': opts['Label'],\n        'IsTeam': opts['IsTeam'],\n        'GroupRole': opts['GroupRole'],\n        'UserRole': opts['UserRole'],\n        'LastUpdated': opts['LastUpdated'],\n        'AutoApplies': this.apiClient.buildCollectionParam(opts['AutoApplies'], 'multi'),\n        'PoliciesContextEditable': opts['PoliciesContextEditable'],\n        'ForceOverride': opts['ForceOverride']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IdmRole;\n      return this.apiClient.callApi(\n        '/role/{Uuid}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Get a Role by ID\n     * @param {String} Uuid Unique identifier of this role\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Label Label of this role.\n     * @param {Boolean} opts.IsTeam Whether this role represents a user team or not.\n     * @param {Boolean} opts.GroupRole Whether this role is attached to a Group object.\n     * @param {Boolean} opts.UserRole Whether this role is attached to a User object.\n     * @param {Number} opts.LastUpdated Last modification date of the role.\n     * @param {Array.<String>} opts.AutoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied.\n     * @param {Boolean} opts.PoliciesContextEditable Whether the policies resolve into an editable state.\n     * @param {Boolean} opts.ForceOverride Is used in a stack of roles, this one will always be applied last.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}\n     */\n    getRole(Uuid, opts) {\n      return this.getRoleWithHttpInfo(Uuid, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Search Roles\n     * @param {module:model/RestSearchRoleRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRolesCollection} and HTTP response\n     */\n    searchRolesWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling searchRoles\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestRolesCollection;\n      return this.apiClient.callApi(\n        '/role', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Search Roles\n     * @param {module:model/RestSearchRoleRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRolesCollection}\n     */\n    searchRoles(body) {\n      return this.searchRolesWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create or update a Role\n     * @param {String} Uuid Unique identifier of this role\n     * @param {module:model/InlineObject} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmRole} and HTTP response\n     */\n    setRoleWithHttpInfo(Uuid, body) {\n      let postBody = body;\n      // verify the required parameter 'Uuid' is set\n      if (Uuid === undefined || Uuid === null) {\n        throw new Error(\"Missing the required parameter 'Uuid' when calling setRole\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling setRole\");\n      }\n\n      let pathParams = {\n        'Uuid': Uuid\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IdmRole;\n      return this.apiClient.callApi(\n        '/role/{Uuid}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Create or update a Role\n     * @param {String} Uuid Unique identifier of this role\n     * @param {module:model/InlineObject} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmRole}\n     */\n    setRole(Uuid, body) {\n      return this.setRoleWithHttpInfo(Uuid, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"RoleServiceApi.js"}