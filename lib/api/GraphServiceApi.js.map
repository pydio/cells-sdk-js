{"version":3,"sources":["../../src/api/GraphServiceApi.js"],"names":["GraphServiceApi","apiClient","ApiClient","instance","body","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestRecommendResponse","callApi","recommendWithHttpInfo","then","response_and_data","data","UserId","RestRelationResponse","relationWithHttpInfo","Segment","RestUserStateResponse","userStateWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport RestError from '../model/RestError';\nimport RestRecommendRequest from '../model/RestRecommendRequest';\nimport RestRecommendResponse from '../model/RestRecommendResponse';\nimport RestRelationResponse from '../model/RestRelationResponse';\nimport RestUserStateResponse from '../model/RestUserStateResponse';\n\n/**\n* GraphService service.\n* @module api/GraphServiceApi\n* @version 4.0\n*/\nexport default class GraphServiceApi {\n\n    /**\n    * Constructs a new GraphServiceApi. \n    * @alias module:api/GraphServiceApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * @param {module:model/RestRecommendRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRecommendResponse} and HTTP response\n     */\n    recommendWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling recommend\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestRecommendResponse;\n      return this.apiClient.callApi(\n        '/graph/recommend', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * @param {module:model/RestRecommendRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRecommendResponse}\n     */\n    recommend(body) {\n      return this.recommendWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Compute relation of context user with another user\n     * @param {String} UserId \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRelationResponse} and HTTP response\n     */\n    relationWithHttpInfo(UserId) {\n      let postBody = null;\n      // verify the required parameter 'UserId' is set\n      if (UserId === undefined || UserId === null) {\n        throw new Error(\"Missing the required parameter 'UserId' when calling relation\");\n      }\n\n      let pathParams = {\n        'UserId': UserId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestRelationResponse;\n      return this.apiClient.callApi(\n        '/graph/relation/{UserId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Compute relation of context user with another user\n     * @param {String} UserId \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRelationResponse}\n     */\n    relation(UserId) {\n      return this.relationWithHttpInfo(UserId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Compute accessible workspaces for a given user\n     * @param {String} Segment \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserStateResponse} and HTTP response\n     */\n    userStateWithHttpInfo(Segment) {\n      let postBody = null;\n      // verify the required parameter 'Segment' is set\n      if (Segment === undefined || Segment === null) {\n        throw new Error(\"Missing the required parameter 'Segment' when calling userState\");\n      }\n\n      let pathParams = {\n        'Segment': Segment\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestUserStateResponse;\n      return this.apiClient.callApi(\n        '/graph/state/{Segment}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Compute accessible workspaces for a given user\n     * @param {String} Segment \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserStateResponse}\n     */\n    userState(Segment) {\n      return this.userStateWithHttpInfo(Segment)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"GraphServiceApi.js"}