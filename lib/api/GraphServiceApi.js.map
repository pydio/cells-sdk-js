{"version":3,"sources":["../../src/api/GraphServiceApi.js"],"names":["GraphServiceApi","apiClient","ApiClient","instance","userId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestRelationResponse","callApi","relationWithHttpInfo","then","response_and_data","data","segment","RestUserStateResponse","userStateWithHttpInfo"],"mappings":";;;;;;;AAcA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACqBA,e;AAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,2BAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAS,IAAIC,sBAAUC,QAAxC;AACH;AAID;AACJ;AACA;AACA;AACA;;;;;WACI,8BAAqBC,MAArB,EAA6B;AAC3B,UAAIC,QAAQ,GAAG,IAAf,CAD2B,CAG3B;;AACA,UAAID,MAAM,KAAKE,SAAX,IAAwBF,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAIG,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUJ;AADK,OAAjB;AAGA,UAAIK,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGC,gCAAjB;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,0BADK,EACuB,KADvB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,kBAASX,MAAT,EAAiB;AACf,aAAO,KAAKc,oBAAL,CAA0Bd,MAA1B,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID;AAGD;AACJ;AACA;AACA;AACA;;;;WACI,+BAAsBC,OAAtB,EAA+B;AAC7B,UAAIjB,QAAQ,GAAG,IAAf,CAD6B,CAG7B;;AACA,UAAIiB,OAAO,KAAKhB,SAAZ,IAAyBgB,OAAO,KAAK,IAAzC,EAA+C;AAC7C,cAAM,IAAIf,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,mBAAWc;AADI,OAAjB;AAGA,UAAIb,WAAW,GAAG,EAAlB;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGQ,iCAAjB;AAEA,aAAO,KAAKtB,SAAL,CAAegB,OAAf,CACL,wBADK,EACqB,KADrB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;AAED;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUO,OAAV,EAAmB;AACjB,aAAO,KAAKE,qBAAL,CAA2BF,OAA3B,EACJH,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport RestRelationResponse from '../model/RestRelationResponse';\nimport RestUserStateResponse from '../model/RestUserStateResponse';\n\n/**\n* GraphService service.\n* @module api/GraphServiceApi\n* @version 1.0\n*/\nexport default class GraphServiceApi {\n\n    /**\n    * Constructs a new GraphServiceApi. \n    * @alias module:api/GraphServiceApi\n    * @class\n    * @param {module:ApiClient} apiClient Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Compute relation of context user with another user\n     * @param {String} userId \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRelationResponse} and HTTP response\n     */\n    relationWithHttpInfo(userId) {\n      let postBody = null;\n\n      // verify the required parameter 'userId' is set\n      if (userId === undefined || userId === null) {\n        throw new Error(\"Missing the required parameter 'userId' when calling relation\");\n      }\n\n\n      let pathParams = {\n        'UserId': userId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestRelationResponse;\n\n      return this.apiClient.callApi(\n        '/graph/relation/{UserId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Compute relation of context user with another user\n     * @param {String} userId \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRelationResponse}\n     */\n    relation(userId) {\n      return this.relationWithHttpInfo(userId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Compute accessible workspaces for a given user\n     * @param {String} segment \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserStateResponse} and HTTP response\n     */\n    userStateWithHttpInfo(segment) {\n      let postBody = null;\n\n      // verify the required parameter 'segment' is set\n      if (segment === undefined || segment === null) {\n        throw new Error(\"Missing the required parameter 'segment' when calling userState\");\n      }\n\n\n      let pathParams = {\n        'Segment': segment\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestUserStateResponse;\n\n      return this.apiClient.callApi(\n        '/graph/state/{Segment}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Compute accessible workspaces for a given user\n     * @param {String} segment \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserStateResponse}\n     */\n    userState(segment) {\n      return this.userStateWithHttpInfo(segment)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"GraphServiceApi.js"}