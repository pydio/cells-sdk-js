{"version":3,"sources":["../../src/api/ConfigServiceApi.js"],"names":["ConfigServiceApi","apiClient","ApiClient","instance","serviceName","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestDiscoveryResponse","callApi","configFormsDiscoveryWithHttpInfo","then","response_and_data","data","body","CtlService","controlServiceWithHttpInfo","EncryptionAdminCreateKeyResponse","createEncryptionKeyWithHttpInfo","peerAddress","RestCreatePeerFolderResponse","createPeerFolderWithHttpInfo","name","RestDeleteDataSourceResponse","deleteDataSourceWithHttpInfo","EncryptionAdminDeleteKeyResponse","deleteEncryptionKeyWithHttpInfo","opts","endpointsDiscoveryWithHttpInfo","EncryptionAdminExportKeyResponse","exportEncryptionKeyWithHttpInfo","fullPath","RestConfiguration","getConfigWithHttpInfo","ObjectDataSource","getDataSourceWithHttpInfo","uuid","TreeVersioningPolicy","getVersioningPolicyWithHttpInfo","EncryptionAdminImportKeyResponse","importEncryptionKeyWithHttpInfo","RestDataSourceCollection","listDataSourcesWithHttpInfo","EncryptionAdminListKeysResponse","listEncryptionKeysWithHttpInfo","RestNodesCollection","listPeerFoldersWithHttpInfo","RestListPeersAddressesResponse","listPeersAddressesWithHttpInfo","RestListProcessesResponse","listProcessesWithHttpInfo","RestServiceCollection","listServicesWithHttpInfo","filter","RestListSitesResponse","listSitesWithHttpInfo","listStorageBucketsWithHttpInfo","RestVersioningPolicyCollection","listVersioningPoliciesWithHttpInfo","listVirtualNodesWithHttpInfo","RestOpenApiResponse","openApiDiscoveryWithHttpInfo","putConfigWithHttpInfo","putDataSourceWithHttpInfo","actionName","RestSchedulerActionFormResponse","schedulerActionFormDiscoveryWithHttpInfo","RestSchedulerActionsResponse","schedulerActionsDiscoveryWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport CtlService from '../model/CtlService';\nimport EncryptionAdminCreateKeyRequest from '../model/EncryptionAdminCreateKeyRequest';\nimport EncryptionAdminCreateKeyResponse from '../model/EncryptionAdminCreateKeyResponse';\nimport EncryptionAdminDeleteKeyRequest from '../model/EncryptionAdminDeleteKeyRequest';\nimport EncryptionAdminDeleteKeyResponse from '../model/EncryptionAdminDeleteKeyResponse';\nimport EncryptionAdminExportKeyRequest from '../model/EncryptionAdminExportKeyRequest';\nimport EncryptionAdminExportKeyResponse from '../model/EncryptionAdminExportKeyResponse';\nimport EncryptionAdminImportKeyRequest from '../model/EncryptionAdminImportKeyRequest';\nimport EncryptionAdminImportKeyResponse from '../model/EncryptionAdminImportKeyResponse';\nimport EncryptionAdminListKeysRequest from '../model/EncryptionAdminListKeysRequest';\nimport EncryptionAdminListKeysResponse from '../model/EncryptionAdminListKeysResponse';\nimport ObjectDataSource from '../model/ObjectDataSource';\nimport RestConfiguration from '../model/RestConfiguration';\nimport RestControlServiceRequest from '../model/RestControlServiceRequest';\nimport RestCreatePeerFolderRequest from '../model/RestCreatePeerFolderRequest';\nimport RestCreatePeerFolderResponse from '../model/RestCreatePeerFolderResponse';\nimport RestDataSourceCollection from '../model/RestDataSourceCollection';\nimport RestDeleteDataSourceResponse from '../model/RestDeleteDataSourceResponse';\nimport RestDiscoveryResponse from '../model/RestDiscoveryResponse';\nimport RestListPeerFoldersRequest from '../model/RestListPeerFoldersRequest';\nimport RestListPeersAddressesResponse from '../model/RestListPeersAddressesResponse';\nimport RestListProcessesRequest from '../model/RestListProcessesRequest';\nimport RestListProcessesResponse from '../model/RestListProcessesResponse';\nimport RestListSitesResponse from '../model/RestListSitesResponse';\nimport RestListStorageBucketsRequest from '../model/RestListStorageBucketsRequest';\nimport RestNodesCollection from '../model/RestNodesCollection';\nimport RestOpenApiResponse from '../model/RestOpenApiResponse';\nimport RestSchedulerActionFormResponse from '../model/RestSchedulerActionFormResponse';\nimport RestSchedulerActionsResponse from '../model/RestSchedulerActionsResponse';\nimport RestServiceCollection from '../model/RestServiceCollection';\nimport RestVersioningPolicyCollection from '../model/RestVersioningPolicyCollection';\nimport TreeVersioningPolicy from '../model/TreeVersioningPolicy';\n\n/**\n* ConfigService service.\n* @module api/ConfigServiceApi\n* @version 1.0\n*/\nexport default class ConfigServiceApi {\n\n    /**\n    * Constructs a new ConfigServiceApi. \n    * @alias module:api/ConfigServiceApi\n    * @class\n    * @param {module:ApiClient} apiClient Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Publish Forms definition for building screens in frontend\n     * @param {String} serviceName \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response\n     */\n    configFormsDiscoveryWithHttpInfo(serviceName) {\n      let postBody = null;\n\n      // verify the required parameter 'serviceName' is set\n      if (serviceName === undefined || serviceName === null) {\n        throw new Error(\"Missing the required parameter 'serviceName' when calling configFormsDiscovery\");\n      }\n\n\n      let pathParams = {\n        'ServiceName': serviceName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDiscoveryResponse;\n\n      return this.apiClient.callApi(\n        '/config/discovery/forms/{ServiceName}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Publish Forms definition for building screens in frontend\n     * @param {String} serviceName \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}\n     */\n    configFormsDiscovery(serviceName) {\n      return this.configFormsDiscoveryWithHttpInfo(serviceName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * [Not Implemented]  Start/Stop a service\n     * @param {module:model/RestControlServiceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CtlService} and HTTP response\n     */\n    controlServiceWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling controlService\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = CtlService;\n\n      return this.apiClient.callApi(\n        '/config/ctl', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * [Not Implemented]  Start/Stop a service\n     * @param {module:model/RestControlServiceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CtlService}\n     */\n    controlService(body) {\n      return this.controlServiceWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a new master key\n     * @param {module:model/EncryptionAdminCreateKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminCreateKeyResponse} and HTTP response\n     */\n    createEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling createEncryptionKey\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminCreateKeyResponse;\n\n      return this.apiClient.callApi(\n        '/config/encryption/create', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a new master key\n     * @param {module:model/EncryptionAdminCreateKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminCreateKeyResponse}\n     */\n    createEncryptionKey(body) {\n      return this.createEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a folder on a given path for a given peer (filesystem)\n     * @param {String} peerAddress \n     * @param {module:model/RestCreatePeerFolderRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestCreatePeerFolderResponse} and HTTP response\n     */\n    createPeerFolderWithHttpInfo(peerAddress, body) {\n      let postBody = body;\n\n      // verify the required parameter 'peerAddress' is set\n      if (peerAddress === undefined || peerAddress === null) {\n        throw new Error(\"Missing the required parameter 'peerAddress' when calling createPeerFolder\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling createPeerFolder\");\n      }\n\n\n      let pathParams = {\n        'PeerAddress': peerAddress\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestCreatePeerFolderResponse;\n\n      return this.apiClient.callApi(\n        '/config/peers/{PeerAddress}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a folder on a given path for a given peer (filesystem)\n     * @param {String} peerAddress \n     * @param {module:model/RestCreatePeerFolderRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestCreatePeerFolderResponse}\n     */\n    createPeerFolder(peerAddress, body) {\n      return this.createPeerFolderWithHttpInfo(peerAddress, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a datasource\n     * @param {String} name \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteDataSourceResponse} and HTTP response\n     */\n    deleteDataSourceWithHttpInfo(name) {\n      let postBody = null;\n\n      // verify the required parameter 'name' is set\n      if (name === undefined || name === null) {\n        throw new Error(\"Missing the required parameter 'name' when calling deleteDataSource\");\n      }\n\n\n      let pathParams = {\n        'Name': name\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDeleteDataSourceResponse;\n\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a datasource\n     * @param {String} name \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteDataSourceResponse}\n     */\n    deleteDataSource(name) {\n      return this.deleteDataSourceWithHttpInfo(name)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an existing master key\n     * @param {module:model/EncryptionAdminDeleteKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminDeleteKeyResponse} and HTTP response\n     */\n    deleteEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling deleteEncryptionKey\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminDeleteKeyResponse;\n\n      return this.apiClient.callApi(\n        '/config/encryption/delete', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an existing master key\n     * @param {module:model/EncryptionAdminDeleteKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminDeleteKeyResponse}\n     */\n    deleteEncryptionKey(body) {\n      return this.deleteEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish available endpoints\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.endpointType Filter result to a specific endpoint type.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response\n     */\n    endpointsDiscoveryWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'EndpointType': opts['endpointType']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDiscoveryResponse;\n\n      return this.apiClient.callApi(\n        '/config/discovery', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Publish available endpoints\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.endpointType Filter result to a specific endpoint type.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}\n     */\n    endpointsDiscovery(opts) {\n      return this.endpointsDiscoveryWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export a master key for backup purpose, protected with a password\n     * @param {module:model/EncryptionAdminExportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminExportKeyResponse} and HTTP response\n     */\n    exportEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling exportEncryptionKey\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminExportKeyResponse;\n\n      return this.apiClient.callApi(\n        '/config/encryption/export', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export a master key for backup purpose, protected with a password\n     * @param {module:model/EncryptionAdminExportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminExportKeyResponse}\n     */\n    exportEncryptionKey(body) {\n      return this.exportEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generic config Get using a full path in the config tree\n     * @param {String} fullPath \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.data JSON-encoded data to store.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response\n     */\n    getConfigWithHttpInfo(fullPath, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'fullPath' is set\n      if (fullPath === undefined || fullPath === null) {\n        throw new Error(\"Missing the required parameter 'fullPath' when calling getConfig\");\n      }\n\n\n      let pathParams = {\n        'FullPath': fullPath\n      };\n      let queryParams = {\n        'Data': opts['data']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestConfiguration;\n\n      return this.apiClient.callApi(\n        '/config/{FullPath}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Generic config Get using a full path in the config tree\n     * @param {String} fullPath \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.data JSON-encoded data to store.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}\n     */\n    getConfig(fullPath, opts) {\n      return this.getConfigWithHttpInfo(fullPath, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Load datasource information\n     * @param {String} name \n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.disabled Whether this data source is disabled or running.\n     * @param {module:model/String} opts.storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (default to LOCAL)\n     * @param {String} opts.objectsServiceName Corresponding objects service name (underlying s3 service).\n     * @param {String} opts.objectsHost Corresponding objects service host.\n     * @param {Number} opts.objectsPort Corresponding objects service port.\n     * @param {Boolean} opts.objectsSecure Corresponding objects service connection type.\n     * @param {String} opts.objectsBucket Corresponding objects service bucket.\n     * @param {String} opts.objectsBaseFolder Corresponding objects service base folder inside the bucket.\n     * @param {String} opts.apiKey Corresponding objects service api key.\n     * @param {String} opts.apiSecret Corresponding objects service api secret.\n     * @param {String} opts.peerAddress Peer address of the data source.\n     * @param {Boolean} opts.watch Not implemented, whether to watch for underlying changes on the FS.\n     * @param {Boolean} opts.flatStorage Store data in flat format (object-storage like).\n     * @param {Boolean} opts.skipSyncOnRestart Do not trigger resync at start.\n     * @param {module:model/String} opts.encryptionMode Type of encryption applied before sending data to storage. (default to CLEAR)\n     * @param {String} opts.encryptionKey Encryption key used for encrypting data.\n     * @param {String} opts.versioningPolicyName Versioning policy describes how files are kept in the versioning queue.\n     * @param {Number} opts.creationDate Data Source creation date.\n     * @param {Number} opts.lastSynchronizationDate Data Source last synchronization date.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response\n     */\n    getDataSourceWithHttpInfo(name, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'name' is set\n      if (name === undefined || name === null) {\n        throw new Error(\"Missing the required parameter 'name' when calling getDataSource\");\n      }\n\n\n      let pathParams = {\n        'Name': name\n      };\n      let queryParams = {\n        'Disabled': opts['disabled'],\n        'StorageType': opts['storageType'],\n        'ObjectsServiceName': opts['objectsServiceName'],\n        'ObjectsHost': opts['objectsHost'],\n        'ObjectsPort': opts['objectsPort'],\n        'ObjectsSecure': opts['objectsSecure'],\n        'ObjectsBucket': opts['objectsBucket'],\n        'ObjectsBaseFolder': opts['objectsBaseFolder'],\n        'ApiKey': opts['apiKey'],\n        'ApiSecret': opts['apiSecret'],\n        'PeerAddress': opts['peerAddress'],\n        'Watch': opts['watch'],\n        'FlatStorage': opts['flatStorage'],\n        'SkipSyncOnRestart': opts['skipSyncOnRestart'],\n        'EncryptionMode': opts['encryptionMode'],\n        'EncryptionKey': opts['encryptionKey'],\n        'VersioningPolicyName': opts['versioningPolicyName'],\n        'CreationDate': opts['creationDate'],\n        'LastSynchronizationDate': opts['lastSynchronizationDate']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = ObjectDataSource;\n\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Load datasource information\n     * @param {String} name \n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.disabled Whether this data source is disabled or running.\n     * @param {module:model/String} opts.storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (default to LOCAL)\n     * @param {String} opts.objectsServiceName Corresponding objects service name (underlying s3 service).\n     * @param {String} opts.objectsHost Corresponding objects service host.\n     * @param {Number} opts.objectsPort Corresponding objects service port.\n     * @param {Boolean} opts.objectsSecure Corresponding objects service connection type.\n     * @param {String} opts.objectsBucket Corresponding objects service bucket.\n     * @param {String} opts.objectsBaseFolder Corresponding objects service base folder inside the bucket.\n     * @param {String} opts.apiKey Corresponding objects service api key.\n     * @param {String} opts.apiSecret Corresponding objects service api secret.\n     * @param {String} opts.peerAddress Peer address of the data source.\n     * @param {Boolean} opts.watch Not implemented, whether to watch for underlying changes on the FS.\n     * @param {Boolean} opts.flatStorage Store data in flat format (object-storage like).\n     * @param {Boolean} opts.skipSyncOnRestart Do not trigger resync at start.\n     * @param {module:model/String} opts.encryptionMode Type of encryption applied before sending data to storage. (default to CLEAR)\n     * @param {String} opts.encryptionKey Encryption key used for encrypting data.\n     * @param {String} opts.versioningPolicyName Versioning policy describes how files are kept in the versioning queue.\n     * @param {Number} opts.creationDate Data Source creation date.\n     * @param {Number} opts.lastSynchronizationDate Data Source last synchronization date.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}\n     */\n    getDataSource(name, opts) {\n      return this.getDataSourceWithHttpInfo(name, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Load a given versioning policy\n     * @param {String} uuid \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.name \n     * @param {String} opts.description \n     * @param {String} opts.versionsDataSourceName \n     * @param {String} opts.versionsDataSourceBucket \n     * @param {String} opts.maxTotalSize \n     * @param {String} opts.maxSizePerFile \n     * @param {String} opts.ignoreFilesGreaterThan \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response\n     */\n    getVersioningPolicyWithHttpInfo(uuid, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'uuid' is set\n      if (uuid === undefined || uuid === null) {\n        throw new Error(\"Missing the required parameter 'uuid' when calling getVersioningPolicy\");\n      }\n\n\n      let pathParams = {\n        'Uuid': uuid\n      };\n      let queryParams = {\n        'Name': opts['name'],\n        'Description': opts['description'],\n        'VersionsDataSourceName': opts['versionsDataSourceName'],\n        'VersionsDataSourceBucket': opts['versionsDataSourceBucket'],\n        'MaxTotalSize': opts['maxTotalSize'],\n        'MaxSizePerFile': opts['maxSizePerFile'],\n        'IgnoreFilesGreaterThan': opts['ignoreFilesGreaterThan']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = TreeVersioningPolicy;\n\n      return this.apiClient.callApi(\n        '/config/versioning/{Uuid}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Load a given versioning policy\n     * @param {String} uuid \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.name \n     * @param {String} opts.description \n     * @param {String} opts.versionsDataSourceName \n     * @param {String} opts.versionsDataSourceBucket \n     * @param {String} opts.maxTotalSize \n     * @param {String} opts.maxSizePerFile \n     * @param {String} opts.ignoreFilesGreaterThan \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}\n     */\n    getVersioningPolicy(uuid, opts) {\n      return this.getVersioningPolicyWithHttpInfo(uuid, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Import a previously exported master key, requires the password created at export time\n     * @param {module:model/EncryptionAdminImportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminImportKeyResponse} and HTTP response\n     */\n    importEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling importEncryptionKey\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminImportKeyResponse;\n\n      return this.apiClient.callApi(\n        '/config/encryption/import', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Import a previously exported master key, requires the password created at export time\n     * @param {module:model/EncryptionAdminImportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminImportKeyResponse}\n     */\n    importEncryptionKey(body) {\n      return this.importEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined datasources\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDataSourceCollection} and HTTP response\n     */\n    listDataSourcesWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestDataSourceCollection;\n\n      return this.apiClient.callApi(\n        '/config/datasource', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all defined datasources\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDataSourceCollection}\n     */\n    listDataSources() {\n      return this.listDataSourcesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List registered master keys\n     * @param {module:model/EncryptionAdminListKeysRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminListKeysResponse} and HTTP response\n     */\n    listEncryptionKeysWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listEncryptionKeys\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminListKeysResponse;\n\n      return this.apiClient.callApi(\n        '/config/encryption/list', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List registered master keys\n     * @param {module:model/EncryptionAdminListKeysRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminListKeysResponse}\n     */\n    listEncryptionKeys(body) {\n      return this.listEncryptionKeysWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List folders on a peer, starting from root\n     * @param {String} peerAddress \n     * @param {module:model/RestListPeerFoldersRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listPeerFoldersWithHttpInfo(peerAddress, body) {\n      let postBody = body;\n\n      // verify the required parameter 'peerAddress' is set\n      if (peerAddress === undefined || peerAddress === null) {\n        throw new Error(\"Missing the required parameter 'peerAddress' when calling listPeerFolders\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listPeerFolders\");\n      }\n\n\n      let pathParams = {\n        'PeerAddress': peerAddress\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n\n      return this.apiClient.callApi(\n        '/config/peers/{PeerAddress}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List folders on a peer, starting from root\n     * @param {String} peerAddress \n     * @param {module:model/RestListPeerFoldersRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listPeerFolders(peerAddress, body) {\n      return this.listPeerFoldersWithHttpInfo(peerAddress, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all detected peers (servers on which the app is running)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListPeersAddressesResponse} and HTTP response\n     */\n    listPeersAddressesWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestListPeersAddressesResponse;\n\n      return this.apiClient.callApi(\n        '/config/peers', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all detected peers (servers on which the app is running)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListPeersAddressesResponse}\n     */\n    listPeersAddresses() {\n      return this.listPeersAddressesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List running Processes, with option PeerId or ServiceName filter\n     * @param {module:model/RestListProcessesRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListProcessesResponse} and HTTP response\n     */\n    listProcessesWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listProcesses\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestListProcessesResponse;\n\n      return this.apiClient.callApi(\n        '/config/processes', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List running Processes, with option PeerId or ServiceName filter\n     * @param {module:model/RestListProcessesRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListProcessesResponse}\n     */\n    listProcesses(body) {\n      return this.listProcessesWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all services and their status\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (default to ANY)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestServiceCollection} and HTTP response\n     */\n    listServicesWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'StatusFilter': opts['statusFilter']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestServiceCollection;\n\n      return this.apiClient.callApi(\n        '/config/ctl', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all services and their status\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (default to ANY)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestServiceCollection}\n     */\n    listServices(opts) {\n      return this.listServicesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List configured sites\n     * @param {String} filter \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListSitesResponse} and HTTP response\n     */\n    listSitesWithHttpInfo(filter) {\n      let postBody = null;\n\n      // verify the required parameter 'filter' is set\n      if (filter === undefined || filter === null) {\n        throw new Error(\"Missing the required parameter 'filter' when calling listSites\");\n      }\n\n\n      let pathParams = {\n        'Filter': filter\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestListSitesResponse;\n\n      return this.apiClient.callApi(\n        '/config/sites/{Filter}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List configured sites\n     * @param {String} filter \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListSitesResponse}\n     */\n    listSites(filter) {\n      return this.listSitesWithHttpInfo(filter)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List Buckets on a given object storage\n     * @param {module:model/RestListStorageBucketsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listStorageBucketsWithHttpInfo(body) {\n      let postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listStorageBuckets\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n\n      return this.apiClient.callApi(\n        '/config/buckets', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List Buckets on a given object storage\n     * @param {module:model/RestListStorageBucketsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listStorageBuckets(body) {\n      return this.listStorageBucketsWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined versioning policies\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestVersioningPolicyCollection} and HTTP response\n     */\n    listVersioningPoliciesWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestVersioningPolicyCollection;\n\n      return this.apiClient.callApi(\n        '/config/versioning', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all defined versioning policies\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestVersioningPolicyCollection}\n     */\n    listVersioningPolicies() {\n      return this.listVersioningPoliciesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined virtual nodes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listVirtualNodesWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n\n      return this.apiClient.callApi(\n        '/config/virtualnodes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all defined virtual nodes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listVirtualNodes() {\n      return this.listVirtualNodesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish available REST APIs\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.endpointType Filter result to a specific endpoint type.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestOpenApiResponse} and HTTP response\n     */\n    openApiDiscoveryWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'EndpointType': opts['endpointType']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestOpenApiResponse;\n\n      return this.apiClient.callApi(\n        '/config/discovery/openapi', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Publish available REST APIs\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.endpointType Filter result to a specific endpoint type.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestOpenApiResponse}\n     */\n    openApiDiscovery(opts) {\n      return this.openApiDiscoveryWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generic config Put, using a full path in the config tree\n     * @param {String} fullPath \n     * @param {module:model/RestConfiguration} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response\n     */\n    putConfigWithHttpInfo(fullPath, body) {\n      let postBody = body;\n\n      // verify the required parameter 'fullPath' is set\n      if (fullPath === undefined || fullPath === null) {\n        throw new Error(\"Missing the required parameter 'fullPath' when calling putConfig\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling putConfig\");\n      }\n\n\n      let pathParams = {\n        'FullPath': fullPath\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestConfiguration;\n\n      return this.apiClient.callApi(\n        '/config/{FullPath}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Generic config Put, using a full path in the config tree\n     * @param {String} fullPath \n     * @param {module:model/RestConfiguration} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}\n     */\n    putConfig(fullPath, body) {\n      return this.putConfigWithHttpInfo(fullPath, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create or update a datasource\n     * @param {String} name \n     * @param {module:model/ObjectDataSource} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response\n     */\n    putDataSourceWithHttpInfo(name, body) {\n      let postBody = body;\n\n      // verify the required parameter 'name' is set\n      if (name === undefined || name === null) {\n        throw new Error(\"Missing the required parameter 'name' when calling putDataSource\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling putDataSource\");\n      }\n\n\n      let pathParams = {\n        'Name': name\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = ObjectDataSource;\n\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create or update a datasource\n     * @param {String} name \n     * @param {module:model/ObjectDataSource} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}\n     */\n    putDataSource(name, body) {\n      return this.putDataSourceWithHttpInfo(name, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish scheduler action XML form for building screens in frontend\n     * @param {String} actionName \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSchedulerActionFormResponse} and HTTP response\n     */\n    schedulerActionFormDiscoveryWithHttpInfo(actionName) {\n      let postBody = null;\n\n      // verify the required parameter 'actionName' is set\n      if (actionName === undefined || actionName === null) {\n        throw new Error(\"Missing the required parameter 'actionName' when calling schedulerActionFormDiscovery\");\n      }\n\n\n      let pathParams = {\n        'ActionName': actionName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestSchedulerActionFormResponse;\n\n      return this.apiClient.callApi(\n        '/config/scheduler/actions/{ActionName}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Publish scheduler action XML form for building screens in frontend\n     * @param {String} actionName \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSchedulerActionFormResponse}\n     */\n    schedulerActionFormDiscovery(actionName) {\n      return this.schedulerActionFormDiscoveryWithHttpInfo(actionName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish scheduler registered actions\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSchedulerActionsResponse} and HTTP response\n     */\n    schedulerActionsDiscoveryWithHttpInfo() {\n      let postBody = null;\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestSchedulerActionsResponse;\n\n      return this.apiClient.callApi(\n        '/config/scheduler/actions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Publish scheduler registered actions\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSchedulerActionsResponse}\n     */\n    schedulerActionsDiscovery() {\n      return this.schedulerActionsDiscoveryWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"ConfigServiceApi.js"}