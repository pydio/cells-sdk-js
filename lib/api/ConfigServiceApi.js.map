{"version":3,"sources":["../../src/api/ConfigServiceApi.js"],"names":["ConfigServiceApi","apiClient","ApiClient","instance","ServiceName","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","RestDiscoveryResponse","callApi","configFormsDiscoveryWithHttpInfo","then","response_and_data","data","body","CtlService","controlServiceWithHttpInfo","EncryptionAdminCreateKeyResponse","createEncryptionKeyWithHttpInfo","PeerAddress","RestCreatePeerFolderResponse","createPeerFolderWithHttpInfo","BucketName","RestCreateStorageBucketResponse","createStorageBucketWithHttpInfo","Name","opts","RestDeleteDataSourceResponse","deleteDataSourceWithHttpInfo","EncryptionAdminDeleteKeyResponse","deleteEncryptionKeyWithHttpInfo","endpointsDiscoveryWithHttpInfo","EncryptionAdminExportKeyResponse","exportEncryptionKeyWithHttpInfo","FullPath","RestConfiguration","getConfigWithHttpInfo","ObjectDataSource","getDataSourceWithHttpInfo","Uuid","TreeVersioningPolicy","getVersioningPolicyWithHttpInfo","EncryptionAdminImportKeyResponse","importEncryptionKeyWithHttpInfo","RestDataSourceCollection","listDataSourcesWithHttpInfo","EncryptionAdminListKeysResponse","listEncryptionKeysWithHttpInfo","RestNodesCollection","listPeerFoldersWithHttpInfo","RestListPeersAddressesResponse","listPeersAddressesWithHttpInfo","RestListProcessesResponse","listProcessesWithHttpInfo","RegistryListResponse","listRegistryWithHttpInfo","RestServiceCollection","listServicesWithHttpInfo","Filter","RestListSitesResponse","listSitesWithHttpInfo","listStorageBucketsWithHttpInfo","RestVersioningPolicyCollection","listVersioningPoliciesWithHttpInfo","listVirtualNodesWithHttpInfo","RestOpenApiResponse","openApiDiscoveryWithHttpInfo","putConfigWithHttpInfo","putDataSourceWithHttpInfo","ActionName","RestSchedulerActionFormResponse","schedulerActionFormDiscoveryWithHttpInfo","RestSchedulerActionsResponse","schedulerActionsDiscoveryWithHttpInfo"],"mappings":"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","sourcesContent":["/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 4.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue from '../model/ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue';\nimport CtlService from '../model/CtlService';\nimport DataSourceObjectDescription from '../model/DataSourceObjectDescription';\nimport EncryptionAdminCreateKeyRequest from '../model/EncryptionAdminCreateKeyRequest';\nimport EncryptionAdminCreateKeyResponse from '../model/EncryptionAdminCreateKeyResponse';\nimport EncryptionAdminDeleteKeyRequest from '../model/EncryptionAdminDeleteKeyRequest';\nimport EncryptionAdminDeleteKeyResponse from '../model/EncryptionAdminDeleteKeyResponse';\nimport EncryptionAdminExportKeyRequest from '../model/EncryptionAdminExportKeyRequest';\nimport EncryptionAdminExportKeyResponse from '../model/EncryptionAdminExportKeyResponse';\nimport EncryptionAdminImportKeyRequest from '../model/EncryptionAdminImportKeyRequest';\nimport EncryptionAdminImportKeyResponse from '../model/EncryptionAdminImportKeyResponse';\nimport EncryptionAdminListKeysRequest from '../model/EncryptionAdminListKeysRequest';\nimport EncryptionAdminListKeysResponse from '../model/EncryptionAdminListKeysResponse';\nimport ObjectDataSource from '../model/ObjectDataSource';\nimport RegistryListRequest from '../model/RegistryListRequest';\nimport RegistryListResponse from '../model/RegistryListResponse';\nimport RestConfiguration from '../model/RestConfiguration';\nimport RestControlServiceRequest from '../model/RestControlServiceRequest';\nimport RestCreatePeerFolderRequest from '../model/RestCreatePeerFolderRequest';\nimport RestCreatePeerFolderResponse from '../model/RestCreatePeerFolderResponse';\nimport RestCreateStorageBucketRequest from '../model/RestCreateStorageBucketRequest';\nimport RestCreateStorageBucketResponse from '../model/RestCreateStorageBucketResponse';\nimport RestDataSourceCollection from '../model/RestDataSourceCollection';\nimport RestDeleteDataSourceResponse from '../model/RestDeleteDataSourceResponse';\nimport RestDiscoveryResponse from '../model/RestDiscoveryResponse';\nimport RestError from '../model/RestError';\nimport RestListPeerFoldersRequest from '../model/RestListPeerFoldersRequest';\nimport RestListPeersAddressesResponse from '../model/RestListPeersAddressesResponse';\nimport RestListProcessesRequest from '../model/RestListProcessesRequest';\nimport RestListProcessesResponse from '../model/RestListProcessesResponse';\nimport RestListSitesResponse from '../model/RestListSitesResponse';\nimport RestListStorageBucketsRequest from '../model/RestListStorageBucketsRequest';\nimport RestNodesCollection from '../model/RestNodesCollection';\nimport RestOpenApiResponse from '../model/RestOpenApiResponse';\nimport RestSchedulerActionFormResponse from '../model/RestSchedulerActionFormResponse';\nimport RestSchedulerActionsResponse from '../model/RestSchedulerActionsResponse';\nimport RestServiceCollection from '../model/RestServiceCollection';\nimport RestVersioningPolicyCollection from '../model/RestVersioningPolicyCollection';\nimport TreeVersioningPolicy from '../model/TreeVersioningPolicy';\n\n/**\n* ConfigService service.\n* @module api/ConfigServiceApi\n* @version 4.0\n*/\nexport default class ConfigServiceApi {\n\n    /**\n    * Constructs a new ConfigServiceApi. \n    * @alias module:api/ConfigServiceApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Publish Forms definition for building screens in frontend\n     * @param {String} ServiceName Retrieve a configuration form for a given service\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response\n     */\n    configFormsDiscoveryWithHttpInfo(ServiceName) {\n      let postBody = null;\n      // verify the required parameter 'ServiceName' is set\n      if (ServiceName === undefined || ServiceName === null) {\n        throw new Error(\"Missing the required parameter 'ServiceName' when calling configFormsDiscovery\");\n      }\n\n      let pathParams = {\n        'ServiceName': ServiceName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestDiscoveryResponse;\n      return this.apiClient.callApi(\n        '/config/discovery/forms/{ServiceName}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Publish Forms definition for building screens in frontend\n     * @param {String} ServiceName Retrieve a configuration form for a given service\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}\n     */\n    configFormsDiscovery(ServiceName) {\n      return this.configFormsDiscoveryWithHttpInfo(ServiceName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * [Not Implemented]  Start/Stop a service\n     * @param {module:model/RestControlServiceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CtlService} and HTTP response\n     */\n    controlServiceWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling controlService\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = CtlService;\n      return this.apiClient.callApi(\n        '/config/ctl', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * [Not Implemented]  Start/Stop a service\n     * @param {module:model/RestControlServiceRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CtlService}\n     */\n    controlService(body) {\n      return this.controlServiceWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a new master key\n     * @param {module:model/EncryptionAdminCreateKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminCreateKeyResponse} and HTTP response\n     */\n    createEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling createEncryptionKey\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminCreateKeyResponse;\n      return this.apiClient.callApi(\n        '/config/encryption/create', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Create a new master key\n     * @param {module:model/EncryptionAdminCreateKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminCreateKeyResponse}\n     */\n    createEncryptionKey(body) {\n      return this.createEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a folder on a given path for a given peer (filesystem)\n     * @param {String} PeerAddress Restrict listing to a given peer\n     * @param {module:model/RestCreatePeerFolderRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestCreatePeerFolderResponse} and HTTP response\n     */\n    createPeerFolderWithHttpInfo(PeerAddress, body) {\n      let postBody = body;\n      // verify the required parameter 'PeerAddress' is set\n      if (PeerAddress === undefined || PeerAddress === null) {\n        throw new Error(\"Missing the required parameter 'PeerAddress' when calling createPeerFolder\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling createPeerFolder\");\n      }\n\n      let pathParams = {\n        'PeerAddress': PeerAddress\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestCreatePeerFolderResponse;\n      return this.apiClient.callApi(\n        '/config/peers/{PeerAddress}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Create a folder on a given path for a given peer (filesystem)\n     * @param {String} PeerAddress Restrict listing to a given peer\n     * @param {module:model/RestCreatePeerFolderRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestCreatePeerFolderResponse}\n     */\n    createPeerFolder(PeerAddress, body) {\n      return this.createPeerFolderWithHttpInfo(PeerAddress, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List Buckets on a given object storage\n     * @param {String} BucketName \n     * @param {module:model/RestCreateStorageBucketRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestCreateStorageBucketResponse} and HTTP response\n     */\n    createStorageBucketWithHttpInfo(BucketName, body) {\n      let postBody = body;\n      // verify the required parameter 'BucketName' is set\n      if (BucketName === undefined || BucketName === null) {\n        throw new Error(\"Missing the required parameter 'BucketName' when calling createStorageBucket\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling createStorageBucket\");\n      }\n\n      let pathParams = {\n        'BucketName': BucketName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestCreateStorageBucketResponse;\n      return this.apiClient.callApi(\n        '/config/buckets/{BucketName}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List Buckets on a given object storage\n     * @param {String} BucketName \n     * @param {module:model/RestCreateStorageBucketRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestCreateStorageBucketResponse}\n     */\n    createStorageBucket(BucketName, body) {\n      return this.createStorageBucketWithHttpInfo(BucketName, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a datasource\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.Disabled Whether this data source is disabled or running\n     * @param {module:model/String} opts.StorageType Type of underlying storage (LOCAL, S3, AZURE, GCS) (default to 'LOCAL')\n     * @param {String} opts.ObjectsServiceName Corresponding objects service name (underlying s3 service)\n     * @param {String} opts.ObjectsHost Corresponding objects service host\n     * @param {Number} opts.ObjectsPort Corresponding objects service port\n     * @param {Boolean} opts.ObjectsSecure Corresponding objects service connection type\n     * @param {String} opts.ObjectsBucket Corresponding objects service bucket\n     * @param {String} opts.ObjectsBaseFolder Corresponding objects service base folder inside the bucket\n     * @param {String} opts.ApiKey Corresponding objects service api key\n     * @param {String} opts.ApiSecret Corresponding objects service api secret\n     * @param {String} opts.PeerAddress Peer address of the data source\n     * @param {Boolean} opts.Watch Not implemented, whether to watch for underlying changes on the FS\n     * @param {Boolean} opts.FlatStorage Store data in flat format (object-storage like)\n     * @param {Boolean} opts.SkipSyncOnRestart Do not trigger resync at start\n     * @param {module:model/String} opts.EncryptionMode Type of encryption applied before sending data to storage (default to 'CLEAR')\n     * @param {String} opts.EncryptionKey Encryption key used for encrypting data\n     * @param {String} opts.VersioningPolicyName Versioning policy describes how files are kept in the versioning queue\n     * @param {Number} opts.CreationDate Data Source creation date\n     * @param {Number} opts.LastSynchronizationDate Data Source last synchronization date\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteDataSourceResponse} and HTTP response\n     */\n    deleteDataSourceWithHttpInfo(Name, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'Name' is set\n      if (Name === undefined || Name === null) {\n        throw new Error(\"Missing the required parameter 'Name' when calling deleteDataSource\");\n      }\n\n      let pathParams = {\n        'Name': Name\n      };\n      let queryParams = {\n        'Disabled': opts['Disabled'],\n        'StorageType': opts['StorageType'],\n        'ObjectsServiceName': opts['ObjectsServiceName'],\n        'ObjectsHost': opts['ObjectsHost'],\n        'ObjectsPort': opts['ObjectsPort'],\n        'ObjectsSecure': opts['ObjectsSecure'],\n        'ObjectsBucket': opts['ObjectsBucket'],\n        'ObjectsBaseFolder': opts['ObjectsBaseFolder'],\n        'ApiKey': opts['ApiKey'],\n        'ApiSecret': opts['ApiSecret'],\n        'PeerAddress': opts['PeerAddress'],\n        'Watch': opts['Watch'],\n        'FlatStorage': opts['FlatStorage'],\n        'SkipSyncOnRestart': opts['SkipSyncOnRestart'],\n        'EncryptionMode': opts['EncryptionMode'],\n        'EncryptionKey': opts['EncryptionKey'],\n        'VersioningPolicyName': opts['VersioningPolicyName'],\n        'CreationDate': opts['CreationDate'],\n        'LastSynchronizationDate': opts['LastSynchronizationDate']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestDeleteDataSourceResponse;\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Delete a datasource\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.Disabled Whether this data source is disabled or running\n     * @param {module:model/String} opts.StorageType Type of underlying storage (LOCAL, S3, AZURE, GCS) (default to 'LOCAL')\n     * @param {String} opts.ObjectsServiceName Corresponding objects service name (underlying s3 service)\n     * @param {String} opts.ObjectsHost Corresponding objects service host\n     * @param {Number} opts.ObjectsPort Corresponding objects service port\n     * @param {Boolean} opts.ObjectsSecure Corresponding objects service connection type\n     * @param {String} opts.ObjectsBucket Corresponding objects service bucket\n     * @param {String} opts.ObjectsBaseFolder Corresponding objects service base folder inside the bucket\n     * @param {String} opts.ApiKey Corresponding objects service api key\n     * @param {String} opts.ApiSecret Corresponding objects service api secret\n     * @param {String} opts.PeerAddress Peer address of the data source\n     * @param {Boolean} opts.Watch Not implemented, whether to watch for underlying changes on the FS\n     * @param {Boolean} opts.FlatStorage Store data in flat format (object-storage like)\n     * @param {Boolean} opts.SkipSyncOnRestart Do not trigger resync at start\n     * @param {module:model/String} opts.EncryptionMode Type of encryption applied before sending data to storage (default to 'CLEAR')\n     * @param {String} opts.EncryptionKey Encryption key used for encrypting data\n     * @param {String} opts.VersioningPolicyName Versioning policy describes how files are kept in the versioning queue\n     * @param {Number} opts.CreationDate Data Source creation date\n     * @param {Number} opts.LastSynchronizationDate Data Source last synchronization date\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteDataSourceResponse}\n     */\n    deleteDataSource(Name, opts) {\n      return this.deleteDataSourceWithHttpInfo(Name, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an existing master key\n     * @param {module:model/EncryptionAdminDeleteKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminDeleteKeyResponse} and HTTP response\n     */\n    deleteEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling deleteEncryptionKey\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminDeleteKeyResponse;\n      return this.apiClient.callApi(\n        '/config/encryption/delete', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Delete an existing master key\n     * @param {module:model/EncryptionAdminDeleteKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminDeleteKeyResponse}\n     */\n    deleteEncryptionKey(body) {\n      return this.deleteEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish available endpoints\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.EndpointType Filter result to a specific endpoint type\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response\n     */\n    endpointsDiscoveryWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'EndpointType': opts['EndpointType']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestDiscoveryResponse;\n      return this.apiClient.callApi(\n        '/config/discovery', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Publish available endpoints\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.EndpointType Filter result to a specific endpoint type\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}\n     */\n    endpointsDiscovery(opts) {\n      return this.endpointsDiscoveryWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export a master key for backup purpose, protected with a password\n     * @param {module:model/EncryptionAdminExportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminExportKeyResponse} and HTTP response\n     */\n    exportEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling exportEncryptionKey\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminExportKeyResponse;\n      return this.apiClient.callApi(\n        '/config/encryption/export', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Export a master key for backup purpose, protected with a password\n     * @param {module:model/EncryptionAdminExportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminExportKeyResponse}\n     */\n    exportEncryptionKey(body) {\n      return this.exportEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generic config Get using a full path in the config tree\n     * @param {String} FullPath Full slash-separated path to the config key\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Data JSON-encoded data to store\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response\n     */\n    getConfigWithHttpInfo(FullPath, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'FullPath' is set\n      if (FullPath === undefined || FullPath === null) {\n        throw new Error(\"Missing the required parameter 'FullPath' when calling getConfig\");\n      }\n\n      let pathParams = {\n        'FullPath': FullPath\n      };\n      let queryParams = {\n        'Data': opts['Data']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestConfiguration;\n      return this.apiClient.callApi(\n        '/config/{FullPath}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Generic config Get using a full path in the config tree\n     * @param {String} FullPath Full slash-separated path to the config key\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Data JSON-encoded data to store\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}\n     */\n    getConfig(FullPath, opts) {\n      return this.getConfigWithHttpInfo(FullPath, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Load datasource information\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.Disabled Whether this data source is disabled or running\n     * @param {module:model/String} opts.StorageType Type of underlying storage (LOCAL, S3, AZURE, GCS) (default to 'LOCAL')\n     * @param {String} opts.ObjectsServiceName Corresponding objects service name (underlying s3 service)\n     * @param {String} opts.ObjectsHost Corresponding objects service host\n     * @param {Number} opts.ObjectsPort Corresponding objects service port\n     * @param {Boolean} opts.ObjectsSecure Corresponding objects service connection type\n     * @param {String} opts.ObjectsBucket Corresponding objects service bucket\n     * @param {String} opts.ObjectsBaseFolder Corresponding objects service base folder inside the bucket\n     * @param {String} opts.ApiKey Corresponding objects service api key\n     * @param {String} opts.ApiSecret Corresponding objects service api secret\n     * @param {String} opts.PeerAddress Peer address of the data source\n     * @param {Boolean} opts.Watch Not implemented, whether to watch for underlying changes on the FS\n     * @param {Boolean} opts.FlatStorage Store data in flat format (object-storage like)\n     * @param {Boolean} opts.SkipSyncOnRestart Do not trigger resync at start\n     * @param {module:model/String} opts.EncryptionMode Type of encryption applied before sending data to storage (default to 'CLEAR')\n     * @param {String} opts.EncryptionKey Encryption key used for encrypting data\n     * @param {String} opts.VersioningPolicyName Versioning policy describes how files are kept in the versioning queue\n     * @param {Number} opts.CreationDate Data Source creation date\n     * @param {Number} opts.LastSynchronizationDate Data Source last synchronization date\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response\n     */\n    getDataSourceWithHttpInfo(Name, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'Name' is set\n      if (Name === undefined || Name === null) {\n        throw new Error(\"Missing the required parameter 'Name' when calling getDataSource\");\n      }\n\n      let pathParams = {\n        'Name': Name\n      };\n      let queryParams = {\n        'Disabled': opts['Disabled'],\n        'StorageType': opts['StorageType'],\n        'ObjectsServiceName': opts['ObjectsServiceName'],\n        'ObjectsHost': opts['ObjectsHost'],\n        'ObjectsPort': opts['ObjectsPort'],\n        'ObjectsSecure': opts['ObjectsSecure'],\n        'ObjectsBucket': opts['ObjectsBucket'],\n        'ObjectsBaseFolder': opts['ObjectsBaseFolder'],\n        'ApiKey': opts['ApiKey'],\n        'ApiSecret': opts['ApiSecret'],\n        'PeerAddress': opts['PeerAddress'],\n        'Watch': opts['Watch'],\n        'FlatStorage': opts['FlatStorage'],\n        'SkipSyncOnRestart': opts['SkipSyncOnRestart'],\n        'EncryptionMode': opts['EncryptionMode'],\n        'EncryptionKey': opts['EncryptionKey'],\n        'VersioningPolicyName': opts['VersioningPolicyName'],\n        'CreationDate': opts['CreationDate'],\n        'LastSynchronizationDate': opts['LastSynchronizationDate']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = ObjectDataSource;\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Load datasource information\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.Disabled Whether this data source is disabled or running\n     * @param {module:model/String} opts.StorageType Type of underlying storage (LOCAL, S3, AZURE, GCS) (default to 'LOCAL')\n     * @param {String} opts.ObjectsServiceName Corresponding objects service name (underlying s3 service)\n     * @param {String} opts.ObjectsHost Corresponding objects service host\n     * @param {Number} opts.ObjectsPort Corresponding objects service port\n     * @param {Boolean} opts.ObjectsSecure Corresponding objects service connection type\n     * @param {String} opts.ObjectsBucket Corresponding objects service bucket\n     * @param {String} opts.ObjectsBaseFolder Corresponding objects service base folder inside the bucket\n     * @param {String} opts.ApiKey Corresponding objects service api key\n     * @param {String} opts.ApiSecret Corresponding objects service api secret\n     * @param {String} opts.PeerAddress Peer address of the data source\n     * @param {Boolean} opts.Watch Not implemented, whether to watch for underlying changes on the FS\n     * @param {Boolean} opts.FlatStorage Store data in flat format (object-storage like)\n     * @param {Boolean} opts.SkipSyncOnRestart Do not trigger resync at start\n     * @param {module:model/String} opts.EncryptionMode Type of encryption applied before sending data to storage (default to 'CLEAR')\n     * @param {String} opts.EncryptionKey Encryption key used for encrypting data\n     * @param {String} opts.VersioningPolicyName Versioning policy describes how files are kept in the versioning queue\n     * @param {Number} opts.CreationDate Data Source creation date\n     * @param {Number} opts.LastSynchronizationDate Data Source last synchronization date\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}\n     */\n    getDataSource(Name, opts) {\n      return this.getDataSourceWithHttpInfo(Name, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Load a given versioning policy\n     * @param {String} Uuid \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Name \n     * @param {String} opts.Description \n     * @param {String} opts.VersionsDataSourceName \n     * @param {String} opts.VersionsDataSourceBucket \n     * @param {String} opts.MaxTotalSize \n     * @param {String} opts.MaxSizePerFile \n     * @param {String} opts.IgnoreFilesGreaterThan \n     * @param {module:model/String} opts.NodeDeletedStrategy  (default to 'KeepAll')\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response\n     */\n    getVersioningPolicyWithHttpInfo(Uuid, opts) {\n      opts = opts || {};\n      let postBody = null;\n      // verify the required parameter 'Uuid' is set\n      if (Uuid === undefined || Uuid === null) {\n        throw new Error(\"Missing the required parameter 'Uuid' when calling getVersioningPolicy\");\n      }\n\n      let pathParams = {\n        'Uuid': Uuid\n      };\n      let queryParams = {\n        'Name': opts['Name'],\n        'Description': opts['Description'],\n        'VersionsDataSourceName': opts['VersionsDataSourceName'],\n        'VersionsDataSourceBucket': opts['VersionsDataSourceBucket'],\n        'MaxTotalSize': opts['MaxTotalSize'],\n        'MaxSizePerFile': opts['MaxSizePerFile'],\n        'IgnoreFilesGreaterThan': opts['IgnoreFilesGreaterThan'],\n        'NodeDeletedStrategy': opts['NodeDeletedStrategy']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = TreeVersioningPolicy;\n      return this.apiClient.callApi(\n        '/config/versioning/{Uuid}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Load a given versioning policy\n     * @param {String} Uuid \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.Name \n     * @param {String} opts.Description \n     * @param {String} opts.VersionsDataSourceName \n     * @param {String} opts.VersionsDataSourceBucket \n     * @param {String} opts.MaxTotalSize \n     * @param {String} opts.MaxSizePerFile \n     * @param {String} opts.IgnoreFilesGreaterThan \n     * @param {module:model/String} opts.NodeDeletedStrategy  (default to 'KeepAll')\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}\n     */\n    getVersioningPolicy(Uuid, opts) {\n      return this.getVersioningPolicyWithHttpInfo(Uuid, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Import a previously exported master key, requires the password created at export time\n     * @param {module:model/EncryptionAdminImportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminImportKeyResponse} and HTTP response\n     */\n    importEncryptionKeyWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling importEncryptionKey\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminImportKeyResponse;\n      return this.apiClient.callApi(\n        '/config/encryption/import', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Import a previously exported master key, requires the password created at export time\n     * @param {module:model/EncryptionAdminImportKeyRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminImportKeyResponse}\n     */\n    importEncryptionKey(body) {\n      return this.importEncryptionKeyWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined datasources\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDataSourceCollection} and HTTP response\n     */\n    listDataSourcesWithHttpInfo() {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestDataSourceCollection;\n      return this.apiClient.callApi(\n        '/config/datasource', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List all defined datasources\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDataSourceCollection}\n     */\n    listDataSources() {\n      return this.listDataSourcesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List registered master keys\n     * @param {module:model/EncryptionAdminListKeysRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminListKeysResponse} and HTTP response\n     */\n    listEncryptionKeysWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listEncryptionKeys\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EncryptionAdminListKeysResponse;\n      return this.apiClient.callApi(\n        '/config/encryption/list', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List registered master keys\n     * @param {module:model/EncryptionAdminListKeysRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminListKeysResponse}\n     */\n    listEncryptionKeys(body) {\n      return this.listEncryptionKeysWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List folders on a peer, starting from root\n     * @param {String} PeerAddress Restrict listing to a given peer\n     * @param {module:model/RestListPeerFoldersRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listPeerFoldersWithHttpInfo(PeerAddress, body) {\n      let postBody = body;\n      // verify the required parameter 'PeerAddress' is set\n      if (PeerAddress === undefined || PeerAddress === null) {\n        throw new Error(\"Missing the required parameter 'PeerAddress' when calling listPeerFolders\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listPeerFolders\");\n      }\n\n      let pathParams = {\n        'PeerAddress': PeerAddress\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n      return this.apiClient.callApi(\n        '/config/peers/{PeerAddress}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List folders on a peer, starting from root\n     * @param {String} PeerAddress Restrict listing to a given peer\n     * @param {module:model/RestListPeerFoldersRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listPeerFolders(PeerAddress, body) {\n      return this.listPeerFoldersWithHttpInfo(PeerAddress, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all detected peers (servers on which the app is running)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListPeersAddressesResponse} and HTTP response\n     */\n    listPeersAddressesWithHttpInfo() {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestListPeersAddressesResponse;\n      return this.apiClient.callApi(\n        '/config/peers', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List all detected peers (servers on which the app is running)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListPeersAddressesResponse}\n     */\n    listPeersAddresses() {\n      return this.listPeersAddressesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List running Processes, with option PeerId or ServiceName filter\n     * @param {module:model/RestListProcessesRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListProcessesResponse} and HTTP response\n     */\n    listProcessesWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listProcesses\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestListProcessesResponse;\n      return this.apiClient.callApi(\n        '/config/processes', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List running Processes, with option PeerId or ServiceName filter\n     * @param {module:model/RestListProcessesRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListProcessesResponse}\n     */\n    listProcesses(body) {\n      return this.listProcessesWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * @param {module:model/RegistryListRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegistryListResponse} and HTTP response\n     */\n    listRegistryWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listRegistry\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RegistryListResponse;\n      return this.apiClient.callApi(\n        '/config/registry', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * @param {module:model/RegistryListRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegistryListResponse}\n     */\n    listRegistry(body) {\n      return this.listRegistryWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all services and their status\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.StatusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (default to 'ANY')\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestServiceCollection} and HTTP response\n     */\n    listServicesWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'StatusFilter': opts['StatusFilter']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestServiceCollection;\n      return this.apiClient.callApi(\n        '/config/ctl', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List all services and their status\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.StatusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (default to 'ANY')\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestServiceCollection}\n     */\n    listServices(opts) {\n      return this.listServicesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List configured sites\n     * @param {String} Filter \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListSitesResponse} and HTTP response\n     */\n    listSitesWithHttpInfo(Filter) {\n      let postBody = null;\n      // verify the required parameter 'Filter' is set\n      if (Filter === undefined || Filter === null) {\n        throw new Error(\"Missing the required parameter 'Filter' when calling listSites\");\n      }\n\n      let pathParams = {\n        'Filter': Filter\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestListSitesResponse;\n      return this.apiClient.callApi(\n        '/config/sites/{Filter}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List configured sites\n     * @param {String} Filter \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListSitesResponse}\n     */\n    listSites(Filter) {\n      return this.listSitesWithHttpInfo(Filter)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List Buckets on a given object storage\n     * @param {module:model/RestListStorageBucketsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listStorageBucketsWithHttpInfo(body) {\n      let postBody = body;\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling listStorageBuckets\");\n      }\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n      return this.apiClient.callApi(\n        '/config/buckets', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List Buckets on a given object storage\n     * @param {module:model/RestListStorageBucketsRequest} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listStorageBuckets(body) {\n      return this.listStorageBucketsWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined versioning policies\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestVersioningPolicyCollection} and HTTP response\n     */\n    listVersioningPoliciesWithHttpInfo() {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestVersioningPolicyCollection;\n      return this.apiClient.callApi(\n        '/config/versioning', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List all defined versioning policies\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestVersioningPolicyCollection}\n     */\n    listVersioningPolicies() {\n      return this.listVersioningPoliciesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all defined virtual nodes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response\n     */\n    listVirtualNodesWithHttpInfo() {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestNodesCollection;\n      return this.apiClient.callApi(\n        '/config/virtualnodes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * List all defined virtual nodes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}\n     */\n    listVirtualNodes() {\n      return this.listVirtualNodesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish available REST APIs\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.EndpointType Filter result to a specific endpoint type\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestOpenApiResponse} and HTTP response\n     */\n    openApiDiscoveryWithHttpInfo(opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'EndpointType': opts['EndpointType']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestOpenApiResponse;\n      return this.apiClient.callApi(\n        '/config/discovery/openapi', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Publish available REST APIs\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.EndpointType Filter result to a specific endpoint type\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestOpenApiResponse}\n     */\n    openApiDiscovery(opts) {\n      return this.openApiDiscoveryWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generic config Put, using a full path in the config tree\n     * @param {String} FullPath Full slash-separated path to the config key\n     * @param {module:model/ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response\n     */\n    putConfigWithHttpInfo(FullPath, body) {\n      let postBody = body;\n      // verify the required parameter 'FullPath' is set\n      if (FullPath === undefined || FullPath === null) {\n        throw new Error(\"Missing the required parameter 'FullPath' when calling putConfig\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling putConfig\");\n      }\n\n      let pathParams = {\n        'FullPath': FullPath\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = RestConfiguration;\n      return this.apiClient.callApi(\n        '/config/{FullPath}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Generic config Put, using a full path in the config tree\n     * @param {String} FullPath Full slash-separated path to the config key\n     * @param {module:model/ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}\n     */\n    putConfig(FullPath, body) {\n      return this.putConfigWithHttpInfo(FullPath, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create or update a datasource\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {module:model/DataSourceObjectDescription} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response\n     */\n    putDataSourceWithHttpInfo(Name, body) {\n      let postBody = body;\n      // verify the required parameter 'Name' is set\n      if (Name === undefined || Name === null) {\n        throw new Error(\"Missing the required parameter 'Name' when calling putDataSource\");\n      }\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling putDataSource\");\n      }\n\n      let pathParams = {\n        'Name': Name\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = ObjectDataSource;\n      return this.apiClient.callApi(\n        '/config/datasource/{Name}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Create or update a datasource\n     * @param {String} Name Name of the data source (max length 34)\n     * @param {module:model/DataSourceObjectDescription} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}\n     */\n    putDataSource(Name, body) {\n      return this.putDataSourceWithHttpInfo(Name, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish scheduler action XML form for building screens in frontend\n     * @param {String} ActionName Name of the action to load\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSchedulerActionFormResponse} and HTTP response\n     */\n    schedulerActionFormDiscoveryWithHttpInfo(ActionName) {\n      let postBody = null;\n      // verify the required parameter 'ActionName' is set\n      if (ActionName === undefined || ActionName === null) {\n        throw new Error(\"Missing the required parameter 'ActionName' when calling schedulerActionFormDiscovery\");\n      }\n\n      let pathParams = {\n        'ActionName': ActionName\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestSchedulerActionFormResponse;\n      return this.apiClient.callApi(\n        '/config/scheduler/actions/{ActionName}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Publish scheduler action XML form for building screens in frontend\n     * @param {String} ActionName Name of the action to load\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSchedulerActionFormResponse}\n     */\n    schedulerActionFormDiscovery(ActionName) {\n      return this.schedulerActionFormDiscoveryWithHttpInfo(ActionName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Publish scheduler registered actions\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSchedulerActionsResponse} and HTTP response\n     */\n    schedulerActionsDiscoveryWithHttpInfo() {\n      let postBody = null;\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = RestSchedulerActionsResponse;\n      return this.apiClient.callApi(\n        '/config/scheduler/actions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, null\n      );\n    }\n\n    /**\n     * Publish scheduler registered actions\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSchedulerActionsResponse}\n     */\n    schedulerActionsDiscovery() {\n      return this.schedulerActionsDiscoveryWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"],"file":"ConfigServiceApi.js"}