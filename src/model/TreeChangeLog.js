/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TreeNode from './TreeNode';
import TreeNodeChangeEvent from './TreeNodeChangeEvent';

/**
 * The TreeChangeLog model module.
 * @module model/TreeChangeLog
 * @version 4.0
 */
class TreeChangeLog {
    /**
     * Constructs a new <code>TreeChangeLog</code>.
     * @alias module:model/TreeChangeLog
     */
    constructor() { 
        
        TreeChangeLog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TreeChangeLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TreeChangeLog} obj Optional instance to populate.
     * @return {module:model/TreeChangeLog} The populated <code>TreeChangeLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TreeChangeLog();

            if (data.hasOwnProperty('Data')) {
                obj['Data'] = ApiClient.convertToType(data['Data'], 'Blob');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Event')) {
                obj['Event'] = TreeNodeChangeEvent.constructFromObject(data['Event']);
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = TreeNode.constructFromObject(data['Location']);
            }
            if (data.hasOwnProperty('MTime')) {
                obj['MTime'] = ApiClient.convertToType(data['MTime'], 'String');
            }
            if (data.hasOwnProperty('OwnerUuid')) {
                obj['OwnerUuid'] = ApiClient.convertToType(data['OwnerUuid'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'String');
            }
            if (data.hasOwnProperty('Uuid')) {
                obj['Uuid'] = ApiClient.convertToType(data['Uuid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Blob} Data
 */
TreeChangeLog.prototype['Data'] = undefined;

/**
 * @member {String} Description
 */
TreeChangeLog.prototype['Description'] = undefined;

/**
 * @member {module:model/TreeNodeChangeEvent} Event
 */
TreeChangeLog.prototype['Event'] = undefined;

/**
 * @member {module:model/TreeNode} Location
 */
TreeChangeLog.prototype['Location'] = undefined;

/**
 * @member {String} MTime
 */
TreeChangeLog.prototype['MTime'] = undefined;

/**
 * @member {String} OwnerUuid
 */
TreeChangeLog.prototype['OwnerUuid'] = undefined;

/**
 * @member {String} Size
 */
TreeChangeLog.prototype['Size'] = undefined;

/**
 * @member {String} Uuid
 */
TreeChangeLog.prototype['Uuid'] = undefined;






export default TreeChangeLog;

