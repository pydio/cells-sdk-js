/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TreeGeoPoint from './TreeGeoPoint';

/**
 * The TreeGeoQuery model module.
 * @module model/TreeGeoQuery
 * @version 4.0
 */
class TreeGeoQuery {
    /**
     * Constructs a new <code>TreeGeoQuery</code>.
     * @alias module:model/TreeGeoQuery
     */
    constructor() { 
        
        TreeGeoQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TreeGeoQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TreeGeoQuery} obj Optional instance to populate.
     * @return {module:model/TreeGeoQuery} The populated <code>TreeGeoQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TreeGeoQuery();

            if (data.hasOwnProperty('BottomRight')) {
                obj['BottomRight'] = TreeGeoPoint.constructFromObject(data['BottomRight']);
            }
            if (data.hasOwnProperty('Center')) {
                obj['Center'] = TreeGeoPoint.constructFromObject(data['Center']);
            }
            if (data.hasOwnProperty('Distance')) {
                obj['Distance'] = ApiClient.convertToType(data['Distance'], 'String');
            }
            if (data.hasOwnProperty('TopLeft')) {
                obj['TopLeft'] = TreeGeoPoint.constructFromObject(data['TopLeft']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/TreeGeoPoint} BottomRight
 */
TreeGeoQuery.prototype['BottomRight'] = undefined;

/**
 * @member {module:model/TreeGeoPoint} Center
 */
TreeGeoQuery.prototype['Center'] = undefined;

/**
 * Example formats supported: \"5in\" \"5inch\" \"7yd\" \"7yards\" \"9ft\" \"9feet\" \"11km\" \"11kilometers\" \"3nm\" \"3nauticalmiles\" \"13mm\" \"13millimeters\" \"15cm\" \"15centimeters\" \"17mi\" \"17miles\" \"19m\" \"19meters\" If the unit cannot be determined, the entire string is parsed and the unit of meters is assumed.
 * @member {String} Distance
 */
TreeGeoQuery.prototype['Distance'] = undefined;

/**
 * @member {module:model/TreeGeoPoint} TopLeft
 */
TreeGeoQuery.prototype['TopLeft'] = undefined;






export default TreeGeoQuery;

