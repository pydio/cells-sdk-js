/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityObject from '../model/ActivityObject';
import ActivitySearchSubscriptionsRequest from '../model/ActivitySearchSubscriptionsRequest';
import ActivityStreamActivitiesRequest from '../model/ActivityStreamActivitiesRequest';
import ActivitySubscription from '../model/ActivitySubscription';
import RestError from '../model/RestError';
import RestSubscriptionsCollection from '../model/RestSubscriptionsCollection';

/**
* ActivityService service.
* @module api/ActivityServiceApi
* @version 4.0
*/
export default class ActivityServiceApi {

    /**
    * Constructs a new ActivityServiceApi. 
    * @alias module:api/ActivityServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Load subscriptions to other users/nodes feeds
     * @param {module:model/ActivitySearchSubscriptionsRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSubscriptionsCollection} and HTTP response
     */
    searchSubscriptionsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestSubscriptionsCollection;
      return this.apiClient.callApi(
        '/activity/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Load subscriptions to other users/nodes feeds
     * @param {module:model/ActivitySearchSubscriptionsRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSubscriptionsCollection}
     */
    searchSubscriptions(body) {
      return this.searchSubscriptionsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Load the the feeds of the currently logged user
     * @param {module:model/ActivityStreamActivitiesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityObject} and HTTP response
     */
    streamWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stream");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityObject;
      return this.apiClient.callApi(
        '/activity/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Load the the feeds of the currently logged user
     * @param {module:model/ActivityStreamActivitiesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityObject}
     */
    stream(body) {
      return this.streamWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Manage subscriptions to other users/nodes feeds
     * @param {module:model/ActivitySubscription} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivitySubscription} and HTTP response
     */
    subscribeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subscribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivitySubscription;
      return this.apiClient.callApi(
        '/activity/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Manage subscriptions to other users/nodes feeds
     * @param {module:model/ActivitySubscription} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivitySubscription}
     */
    subscribe(body) {
      return this.subscribeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
