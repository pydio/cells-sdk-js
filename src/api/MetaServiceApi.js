/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestBulkMetaResponse from '../model/RestBulkMetaResponse';
import RestGetBulkMetaRequest from '../model/RestGetBulkMetaRequest';
import RestMetaCollection from '../model/RestMetaCollection';
import RestMetaNamespaceRequest from '../model/RestMetaNamespaceRequest';
import TreeNode from '../model/TreeNode';

/**
* MetaService service.
* @module api/MetaServiceApi
* @version 1.0
*/
export default class MetaServiceApi {

    /**
    * Constructs a new MetaServiceApi. 
    * @alias module:api/MetaServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete metadata of a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    deleteMetaWithHttpInfo(nodePath, body) {
      let postBody = body;

      // verify the required parameter 'nodePath' is set
      if (nodePath === undefined || nodePath === null) {
        throw new Error("Missing the required parameter 'nodePath' when calling deleteMeta");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteMeta");
      }


      let pathParams = {
        'NodePath': nodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;

      return this.apiClient.callApi(
        '/meta/delete/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete metadata of a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    deleteMeta(nodePath, body) {
      return this.deleteMetaWithHttpInfo(nodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * @param {module:model/RestGetBulkMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestBulkMetaResponse} and HTTP response
     */
    getBulkMetaWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getBulkMeta");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestBulkMetaResponse;

      return this.apiClient.callApi(
        '/meta/bulk/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * @param {module:model/RestGetBulkMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestBulkMetaResponse}
     */
    getBulkMeta(body) {
      return this.getBulkMetaWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Load metadata for a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    getMetaWithHttpInfo(nodePath, body) {
      let postBody = body;

      // verify the required parameter 'nodePath' is set
      if (nodePath === undefined || nodePath === null) {
        throw new Error("Missing the required parameter 'nodePath' when calling getMeta");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMeta");
      }


      let pathParams = {
        'NodePath': nodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;

      return this.apiClient.callApi(
        '/meta/get/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Load metadata for a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    getMeta(nodePath, body) {
      return this.getMetaWithHttpInfo(nodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata for a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    setMetaWithHttpInfo(nodePath, body) {
      let postBody = body;

      // verify the required parameter 'nodePath' is set
      if (nodePath === undefined || nodePath === null) {
        throw new Error("Missing the required parameter 'nodePath' when calling setMeta");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setMeta");
      }


      let pathParams = {
        'NodePath': nodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;

      return this.apiClient.callApi(
        '/meta/set/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update metadata for a given node
     * @param {String} nodePath 
     * @param {module:model/RestMetaCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    setMeta(nodePath, body) {
      return this.setMetaWithHttpInfo(nodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
