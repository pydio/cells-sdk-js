/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestBulkMetaResponse from '../model/RestBulkMetaResponse';
import RestError from '../model/RestError';
import RestGetBulkMetaRequest from '../model/RestGetBulkMetaRequest';
import RestMetaCollection from '../model/RestMetaCollection';
import RestMetaNamespaceRequest from '../model/RestMetaNamespaceRequest';
import RestMetaNamespaceRequest1 from '../model/RestMetaNamespaceRequest1';
import TreeNode from '../model/TreeNode';

/**
* MetaService service.
* @module api/MetaServiceApi
* @version 4.0
*/
export default class MetaServiceApi {

    /**
    * Constructs a new MetaServiceApi. 
    * @alias module:api/MetaServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete metadata of a given node
     * @param {String} NodePath Path to the requested node
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    deleteMetaWithHttpInfo(NodePath, body) {
      let postBody = body;
      // verify the required parameter 'NodePath' is set
      if (NodePath === undefined || NodePath === null) {
        throw new Error("Missing the required parameter 'NodePath' when calling deleteMeta");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteMeta");
      }

      let pathParams = {
        'NodePath': NodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;
      return this.apiClient.callApi(
        '/meta/delete/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete metadata of a given node
     * @param {String} NodePath Path to the requested node
     * @param {module:model/RestMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    deleteMeta(NodePath, body) {
      return this.deleteMetaWithHttpInfo(NodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * @param {module:model/RestGetBulkMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestBulkMetaResponse} and HTTP response
     */
    getBulkMetaWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getBulkMeta");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestBulkMetaResponse;
      return this.apiClient.callApi(
        '/meta/bulk/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * @param {module:model/RestGetBulkMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestBulkMetaResponse}
     */
    getBulkMeta(body) {
      return this.getBulkMetaWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Load metadata for a given node
     * @param {String} NodePath Path to the requested node
     * @param {module:model/RestMetaNamespaceRequest1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    getMetaWithHttpInfo(NodePath, body) {
      let postBody = body;
      // verify the required parameter 'NodePath' is set
      if (NodePath === undefined || NodePath === null) {
        throw new Error("Missing the required parameter 'NodePath' when calling getMeta");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMeta");
      }

      let pathParams = {
        'NodePath': NodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;
      return this.apiClient.callApi(
        '/meta/get/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Load metadata for a given node
     * @param {String} NodePath Path to the requested node
     * @param {module:model/RestMetaNamespaceRequest1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    getMeta(NodePath, body) {
      return this.getMetaWithHttpInfo(NodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata for a given node
     * @param {String} NodePath 
     * @param {module:model/RestMetaCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    setMetaWithHttpInfo(NodePath, body) {
      let postBody = body;
      // verify the required parameter 'NodePath' is set
      if (NodePath === undefined || NodePath === null) {
        throw new Error("Missing the required parameter 'NodePath' when calling setMeta");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setMeta");
      }

      let pathParams = {
        'NodePath': NodePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;
      return this.apiClient.callApi(
        '/meta/set/{NodePath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update metadata for a given node
     * @param {String} NodePath 
     * @param {module:model/RestMetaCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    setMeta(NodePath, body) {
      return this.setMetaWithHttpInfo(NodePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
