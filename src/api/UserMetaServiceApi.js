/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdmSearchUserMetaRequest from '../model/IdmSearchUserMetaRequest';
import IdmUpdateUserMetaNamespaceRequest from '../model/IdmUpdateUserMetaNamespaceRequest';
import IdmUpdateUserMetaNamespaceResponse from '../model/IdmUpdateUserMetaNamespaceResponse';
import IdmUpdateUserMetaRequest from '../model/IdmUpdateUserMetaRequest';
import IdmUpdateUserMetaResponse from '../model/IdmUpdateUserMetaResponse';
import RestBulkMetaResponse from '../model/RestBulkMetaResponse';
import RestDeleteUserMetaTagsResponse from '../model/RestDeleteUserMetaTagsResponse';
import RestError from '../model/RestError';
import RestListUserMetaTagsResponse from '../model/RestListUserMetaTagsResponse';
import RestPutUserMetaTagRequest from '../model/RestPutUserMetaTagRequest';
import RestPutUserMetaTagResponse from '../model/RestPutUserMetaTagResponse';
import RestUserBookmarksRequest from '../model/RestUserBookmarksRequest';
import RestUserMetaCollection from '../model/RestUserMetaCollection';
import RestUserMetaNamespaceCollection from '../model/RestUserMetaNamespaceCollection';

/**
* UserMetaService service.
* @module api/UserMetaServiceApi
* @version 4.0
*/
export default class UserMetaServiceApi {

    /**
    * Constructs a new UserMetaServiceApi. 
    * @alias module:api/UserMetaServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete one or all tags for a given namespace (use * for all tags)
     * @param {String} Namespace Delete tags from this namespace
     * @param {String} Tags Delete this tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteUserMetaTagsResponse} and HTTP response
     */
    deleteUserMetaTagsWithHttpInfo(Namespace, Tags) {
      let postBody = null;
      // verify the required parameter 'Namespace' is set
      if (Namespace === undefined || Namespace === null) {
        throw new Error("Missing the required parameter 'Namespace' when calling deleteUserMetaTags");
      }
      // verify the required parameter 'Tags' is set
      if (Tags === undefined || Tags === null) {
        throw new Error("Missing the required parameter 'Tags' when calling deleteUserMetaTags");
      }

      let pathParams = {
        'Namespace': Namespace,
        'Tags': Tags
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestDeleteUserMetaTagsResponse;
      return this.apiClient.callApi(
        '/user-meta/tags/{Namespace}/{Tags}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete one or all tags for a given namespace (use * for all tags)
     * @param {String} Namespace Delete tags from this namespace
     * @param {String} Tags Delete this tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteUserMetaTagsResponse}
     */
    deleteUserMetaTags(Namespace, Tags) {
      return this.deleteUserMetaTagsWithHttpInfo(Namespace, Tags)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List defined meta namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserMetaNamespaceCollection} and HTTP response
     */
    listUserMetaNamespaceWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestUserMetaNamespaceCollection;
      return this.apiClient.callApi(
        '/user-meta/namespace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List defined meta namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserMetaNamespaceCollection}
     */
    listUserMetaNamespace() {
      return this.listUserMetaNamespaceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Tags for a given namespace
     * @param {String} Namespace List user meta tags for this namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListUserMetaTagsResponse} and HTTP response
     */
    listUserMetaTagsWithHttpInfo(Namespace) {
      let postBody = null;
      // verify the required parameter 'Namespace' is set
      if (Namespace === undefined || Namespace === null) {
        throw new Error("Missing the required parameter 'Namespace' when calling listUserMetaTags");
      }

      let pathParams = {
        'Namespace': Namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestListUserMetaTagsResponse;
      return this.apiClient.callApi(
        '/user-meta/tags/{Namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Tags for a given namespace
     * @param {String} Namespace List user meta tags for this namespace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListUserMetaTagsResponse}
     */
    listUserMetaTags(Namespace) {
      return this.listUserMetaTagsWithHttpInfo(Namespace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new value to Tags for a given namespace
     * @param {String} Namespace Add a tag value for this namespace
     * @param {module:model/RestPutUserMetaTagRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestPutUserMetaTagResponse} and HTTP response
     */
    putUserMetaTagWithHttpInfo(Namespace, body) {
      let postBody = body;
      // verify the required parameter 'Namespace' is set
      if (Namespace === undefined || Namespace === null) {
        throw new Error("Missing the required parameter 'Namespace' when calling putUserMetaTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putUserMetaTag");
      }

      let pathParams = {
        'Namespace': Namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestPutUserMetaTagResponse;
      return this.apiClient.callApi(
        '/user-meta/tags/{Namespace}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new value to Tags for a given namespace
     * @param {String} Namespace Add a tag value for this namespace
     * @param {module:model/RestPutUserMetaTagRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestPutUserMetaTagResponse}
     */
    putUserMetaTag(Namespace, body) {
      return this.putUserMetaTagWithHttpInfo(Namespace, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search a list of meta by node Id or by User id and by namespace
     * @param {module:model/IdmSearchUserMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserMetaCollection} and HTTP response
     */
    searchUserMetaWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchUserMeta");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestUserMetaCollection;
      return this.apiClient.callApi(
        '/user-meta/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search a list of meta by node Id or by User id and by namespace
     * @param {module:model/IdmSearchUserMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserMetaCollection}
     */
    searchUserMeta(body) {
      return this.searchUserMetaWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update/delete user meta
     * @param {module:model/IdmUpdateUserMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUpdateUserMetaResponse} and HTTP response
     */
    updateUserMetaWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserMeta");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdmUpdateUserMetaResponse;
      return this.apiClient.callApi(
        '/user-meta/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update/delete user meta
     * @param {module:model/IdmUpdateUserMetaRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUpdateUserMetaResponse}
     */
    updateUserMeta(body) {
      return this.updateUserMetaWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin: update namespaces
     * @param {module:model/IdmUpdateUserMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUpdateUserMetaNamespaceResponse} and HTTP response
     */
    updateUserMetaNamespaceWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserMetaNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdmUpdateUserMetaNamespaceResponse;
      return this.apiClient.callApi(
        '/user-meta/namespace', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin: update namespaces
     * @param {module:model/IdmUpdateUserMetaNamespaceRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUpdateUserMetaNamespaceResponse}
     */
    updateUserMetaNamespace(body) {
      return this.updateUserMetaNamespaceWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {module:model/RestUserBookmarksRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestBulkMetaResponse} and HTTP response
     */
    userBookmarksWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userBookmarks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestBulkMetaResponse;
      return this.apiClient.callApi(
        '/user-meta/bookmarks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {module:model/RestUserBookmarksRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestBulkMetaResponse}
     */
    userBookmarks(body) {
      return this.userBookmarksWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
