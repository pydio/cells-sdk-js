/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestDocumentAccessTokenRequest from '../model/RestDocumentAccessTokenRequest';
import RestDocumentAccessTokenResponse from '../model/RestDocumentAccessTokenResponse';
import RestError from '../model/RestError';
import RestResetPasswordRequest from '../model/RestResetPasswordRequest';
import RestResetPasswordResponse from '../model/RestResetPasswordResponse';
import RestResetPasswordTokenResponse from '../model/RestResetPasswordTokenResponse';
import RestRevokeRequest from '../model/RestRevokeRequest';
import RestRevokeResponse from '../model/RestRevokeResponse';

/**
* TokenService service.
* @module api/TokenServiceApi
* @version 4.0
*/
export default class TokenServiceApi {

    /**
    * Constructs a new TokenServiceApi. 
    * @alias module:api/TokenServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Generate a temporary access token for a specific document for the current user
     * @param {module:model/RestDocumentAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDocumentAccessTokenResponse} and HTTP response
     */
    generateDocumentAccessTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling generateDocumentAccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestDocumentAccessTokenResponse;
      return this.apiClient.callApi(
        '/auth/token/document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate a temporary access token for a specific document for the current user
     * @param {module:model/RestDocumentAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDocumentAccessTokenResponse}
     */
    generateDocumentAccessToken(body) {
      return this.generateDocumentAccessTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finish up the reset password process by providing the unique token
     * @param {module:model/RestResetPasswordRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordResponse} and HTTP response
     */
    resetPasswordWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestResetPasswordResponse;
      return this.apiClient.callApi(
        '/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Finish up the reset password process by providing the unique token
     * @param {module:model/RestResetPasswordRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordResponse}
     */
    resetPassword(body) {
      return this.resetPasswordWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a unique token for the reset password process
     * @param {String} UserLogin Start a ResetPassword workflow for this user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestResetPasswordTokenResponse} and HTTP response
     */
    resetPasswordTokenWithHttpInfo(UserLogin) {
      let postBody = null;
      // verify the required parameter 'UserLogin' is set
      if (UserLogin === undefined || UserLogin === null) {
        throw new Error("Missing the required parameter 'UserLogin' when calling resetPasswordToken");
      }

      let pathParams = {
        'UserLogin': UserLogin
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestResetPasswordTokenResponse;
      return this.apiClient.callApi(
        '/auth/reset-password-token/{UserLogin}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate a unique token for the reset password process
     * @param {String} UserLogin Start a ResetPassword workflow for this user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestResetPasswordTokenResponse}
     */
    resetPasswordToken(UserLogin) {
      return this.resetPasswordTokenWithHttpInfo(UserLogin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke a JWT token
     * @param {module:model/RestRevokeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRevokeResponse} and HTTP response
     */
    revokeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling revoke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRevokeResponse;
      return this.apiClient.callApi(
        '/auth/token/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke a JWT token
     * @param {module:model/RestRevokeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRevokeResponse}
     */
    revoke(body) {
      return this.revokeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
