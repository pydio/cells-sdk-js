/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestRelationResponse from '../model/RestRelationResponse';
import RestUserStateResponse from '../model/RestUserStateResponse';

/**
* GraphService service.
* @module api/GraphServiceApi
* @version 1.0
*/
export default class GraphServiceApi {

    /**
    * Constructs a new GraphServiceApi. 
    * @alias module:api/GraphServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Compute relation of context user with another user
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRelationResponse} and HTTP response
     */
    relationWithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling relation");
      }


      let pathParams = {
        'UserId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRelationResponse;

      return this.apiClient.callApi(
        '/graph/relation/{UserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Compute relation of context user with another user
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRelationResponse}
     */
    relation(userId) {
      return this.relationWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Compute accessible workspaces for a given user
     * @param {String} segment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserStateResponse} and HTTP response
     */
    userStateWithHttpInfo(segment) {
      let postBody = null;

      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling userState");
      }


      let pathParams = {
        'Segment': segment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestUserStateResponse;

      return this.apiClient.callApi(
        '/graph/state/{Segment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Compute accessible workspaces for a given user
     * @param {String} segment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserStateResponse}
     */
    userState(segment) {
      return this.userStateWithHttpInfo(segment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
