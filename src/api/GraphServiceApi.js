/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestError from '../model/RestError';
import RestRecommendRequest from '../model/RestRecommendRequest';
import RestRecommendResponse from '../model/RestRecommendResponse';
import RestRelationResponse from '../model/RestRelationResponse';
import RestUserStateResponse from '../model/RestUserStateResponse';

/**
* GraphService service.
* @module api/GraphServiceApi
* @version 4.0
*/
export default class GraphServiceApi {

    /**
    * Constructs a new GraphServiceApi. 
    * @alias module:api/GraphServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/RestRecommendRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRecommendResponse} and HTTP response
     */
    recommendWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recommend");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRecommendResponse;
      return this.apiClient.callApi(
        '/graph/recommend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RestRecommendRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRecommendResponse}
     */
    recommend(body) {
      return this.recommendWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Compute relation of context user with another user
     * @param {String} UserId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRelationResponse} and HTTP response
     */
    relationWithHttpInfo(UserId) {
      let postBody = null;
      // verify the required parameter 'UserId' is set
      if (UserId === undefined || UserId === null) {
        throw new Error("Missing the required parameter 'UserId' when calling relation");
      }

      let pathParams = {
        'UserId': UserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestRelationResponse;
      return this.apiClient.callApi(
        '/graph/relation/{UserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Compute relation of context user with another user
     * @param {String} UserId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRelationResponse}
     */
    relation(UserId) {
      return this.relationWithHttpInfo(UserId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Compute accessible workspaces for a given user
     * @param {String} Segment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUserStateResponse} and HTTP response
     */
    userStateWithHttpInfo(Segment) {
      let postBody = null;
      // verify the required parameter 'Segment' is set
      if (Segment === undefined || Segment === null) {
        throw new Error("Missing the required parameter 'Segment' when calling userState");
      }

      let pathParams = {
        'Segment': Segment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestUserStateResponse;
      return this.apiClient.callApi(
        '/graph/state/{Segment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Compute accessible workspaces for a given user
     * @param {String} Segment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUserStateResponse}
     */
    userState(Segment) {
      return this.userStateWithHttpInfo(Segment)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
