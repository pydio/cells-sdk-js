/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestError from '../model/RestError';
import RestFrontBinaryResponse from '../model/RestFrontBinaryResponse';
import RestFrontBootConfResponse from '../model/RestFrontBootConfResponse';
import RestFrontEnrollAuthRequest from '../model/RestFrontEnrollAuthRequest';
import RestFrontEnrollAuthResponse from '../model/RestFrontEnrollAuthResponse';
import RestFrontMessagesResponse from '../model/RestFrontMessagesResponse';
import RestFrontPluginsResponse from '../model/RestFrontPluginsResponse';
import RestFrontSessionRequest from '../model/RestFrontSessionRequest';
import RestFrontSessionResponse from '../model/RestFrontSessionResponse';
import RestFrontStateResponse from '../model/RestFrontStateResponse';
import RestSettingsMenuResponse from '../model/RestSettingsMenuResponse';

/**
* FrontendService service.
* @module api/FrontendServiceApi
* @version 4.0
*/
export default class FrontendServiceApi {

    /**
    * Constructs a new FrontendServiceApi. 
    * @alias module:api/FrontendServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add some data to the initial set of parameters loaded by the frontend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontBootConfResponse} and HTTP response
     */
    frontBootConfWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontBootConfResponse;
      return this.apiClient.callApi(
        '/frontend/bootconf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add some data to the initial set of parameters loaded by the frontend
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontBootConfResponse}
     */
    frontBootConf() {
      return this.frontBootConfWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generic endpoint that can be implemented by 2FA systems for enrollment
     * @param {module:model/RestFrontEnrollAuthRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontEnrollAuthResponse} and HTTP response
     */
    frontEnrollAuthWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling frontEnrollAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestFrontEnrollAuthResponse;
      return this.apiClient.callApi(
        '/frontend/enroll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generic endpoint that can be implemented by 2FA systems for enrollment
     * @param {module:model/RestFrontEnrollAuthRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontEnrollAuthResponse}
     */
    frontEnrollAuth(body) {
      return this.frontEnrollAuthWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Serve list of I18n messages
     * @param {String} Lang 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontMessagesResponse} and HTTP response
     */
    frontMessagesWithHttpInfo(Lang) {
      let postBody = null;
      // verify the required parameter 'Lang' is set
      if (Lang === undefined || Lang === null) {
        throw new Error("Missing the required parameter 'Lang' when calling frontMessages");
      }

      let pathParams = {
        'Lang': Lang
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontMessagesResponse;
      return this.apiClient.callApi(
        '/frontend/messages/{Lang}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Serve list of I18n messages
     * @param {String} Lang 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontMessagesResponse}
     */
    frontMessages(Lang) {
      return this.frontMessagesWithHttpInfo(Lang)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Serve list of I18n messages
     * @param {String} Lang 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontPluginsResponse} and HTTP response
     */
    frontPluginsWithHttpInfo(Lang) {
      let postBody = null;
      // verify the required parameter 'Lang' is set
      if (Lang === undefined || Lang === null) {
        throw new Error("Missing the required parameter 'Lang' when calling frontPlugins");
      }

      let pathParams = {
        'Lang': Lang
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontPluginsResponse;
      return this.apiClient.callApi(
        '/frontend/plugins/{Lang}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Serve list of I18n messages
     * @param {String} Lang 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontPluginsResponse}
     */
    frontPlugins(Lang) {
      return this.frontPluginsWithHttpInfo(Lang)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload frontend binaries (avatars / logos / bg images)
     * @param {String} BinaryType Currently supported values are USER and GLOBAL
     * @param {String} Uuid Id of the binary
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontBinaryResponse} and HTTP response
     */
    frontPutBinaryWithHttpInfo(BinaryType, Uuid) {
      let postBody = null;
      // verify the required parameter 'BinaryType' is set
      if (BinaryType === undefined || BinaryType === null) {
        throw new Error("Missing the required parameter 'BinaryType' when calling frontPutBinary");
      }
      // verify the required parameter 'Uuid' is set
      if (Uuid === undefined || Uuid === null) {
        throw new Error("Missing the required parameter 'Uuid' when calling frontPutBinary");
      }

      let pathParams = {
        'BinaryType': BinaryType,
        'Uuid': Uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontBinaryResponse;
      return this.apiClient.callApi(
        '/frontend/binaries/{BinaryType}/{Uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload frontend binaries (avatars / logos / bg images)
     * @param {String} BinaryType Currently supported values are USER and GLOBAL
     * @param {String} Uuid Id of the binary
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontBinaryResponse}
     */
    frontPutBinary(BinaryType, Uuid) {
      return this.frontPutBinaryWithHttpInfo(BinaryType, Uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Serve frontend binaries directly (avatars / logos / bg images)
     * @param {String} BinaryType Currently supported values are USER and GLOBAL
     * @param {String} Uuid Id of the binary
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontBinaryResponse} and HTTP response
     */
    frontServeBinaryWithHttpInfo(BinaryType, Uuid) {
      let postBody = null;
      // verify the required parameter 'BinaryType' is set
      if (BinaryType === undefined || BinaryType === null) {
        throw new Error("Missing the required parameter 'BinaryType' when calling frontServeBinary");
      }
      // verify the required parameter 'Uuid' is set
      if (Uuid === undefined || Uuid === null) {
        throw new Error("Missing the required parameter 'Uuid' when calling frontServeBinary");
      }

      let pathParams = {
        'BinaryType': BinaryType,
        'Uuid': Uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontBinaryResponse;
      return this.apiClient.callApi(
        '/frontend/binaries/{BinaryType}/{Uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Serve frontend binaries directly (avatars / logos / bg images)
     * @param {String} BinaryType Currently supported values are USER and GLOBAL
     * @param {String} Uuid Id of the binary
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontBinaryResponse}
     */
    frontServeBinary(BinaryType, Uuid) {
      return this.frontServeBinaryWithHttpInfo(BinaryType, Uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Handle JWT
     * @param {module:model/RestFrontSessionRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontSessionResponse} and HTTP response
     */
    frontSessionWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling frontSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestFrontSessionResponse;
      return this.apiClient.callApi(
        '/frontend/session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Handle JWT
     * @param {module:model/RestFrontSessionRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontSessionResponse}
     */
    frontSession(body) {
      return this.frontSessionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send XML state registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.XPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestFrontStateResponse} and HTTP response
     */
    frontStateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'XPath': opts['XPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestFrontStateResponse;
      return this.apiClient.callApi(
        '/frontend/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send XML state registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.XPath 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestFrontStateResponse}
     */
    frontState(opts) {
      return this.frontStateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sends a tree of nodes to be used a menu in the Settings panel
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestSettingsMenuResponse} and HTTP response
     */
    settingsMenuWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestSettingsMenuResponse;
      return this.apiClient.callApi(
        '/frontend/settings-menu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sends a tree of nodes to be used a menu in the Settings panel
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestSettingsMenuResponse}
     */
    settingsMenu() {
      return this.settingsMenuWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
